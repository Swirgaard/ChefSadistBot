import json
import random
import re
import logging
import os
from typing import Dict, List, Optional, Any

KNOWLEDGE_BASE: Dict[str, Any] = {}

def load_knowledge_base():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ JSON —Ñ–∞–π–ª—ã –∏–∑ –ø–∞–ø–∫–∏ data, –∞–≥—Ä–µ–≥–∏—Ä—É—è –º–æ–¥—É–ª—å–Ω—ã–µ –±–∞–∑—ã."""
    global KNOWLEDGE_BASE
    data_path = "data/"
    try:
        KNOWLEDGE_BASE["ingredients"] = {}
        ingredient_files = [f for f in os.listdir(data_path) if f.endswith("_ingredients.json")]
        for filename in ingredient_files:
            with open(os.path.join(data_path, filename), "r", encoding="utf-8") as f:
                KNOWLEDGE_BASE["ingredients"].update(json.load(f))

        KNOWLEDGE_BASE["recipes"] = []
        recipe_files = [f for f in os.listdir(data_path) if f.endswith("_recipes.json")]
        for filename in recipe_files:
            with open(os.path.join(data_path, filename), "r", encoding="utf-8") as f:
                KNOWLEDGE_BASE["recipes"].extend(json.load(f))
        
        with open(os.path.join(data_path, "phrases.json"), "r", encoding="utf-8") as f:
            KNOWLEDGE_BASE["phrases"] = json.load(f)

        with open(os.path.join(data_path, "terms.json"), "r", encoding="utf-8") as f:
            terms_list = json.load(f)
            KNOWLEDGE_BASE["terms"] = {term["term_id"]: term for term in terms_list}
        
        if not KNOWLEDGE_BASE["recipes"]:
             raise FileNotFoundError("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ —Å —Ä–µ—Ü–µ–ø—Ç–∞–º–∏")
        if not KNOWLEDGE_BASE["ingredients"]:
             raise FileNotFoundError("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ —Å –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞–º–∏")
        if not KNOWLEDGE_BASE["terms"]:
             logging.warning("–§–∞–π–ª terms.json –ø—É—Å—Ç –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.")

        logging.info("–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏ –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–∞.")
    except Exception as e:
        logging.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π: {e}", exc_info=True)
        raise

def parse_user_query(text: str) -> List[str]:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏ –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –∫–ª—é—á–∏ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    cleaned_text = text.lower()
    found_keys = set()
    ingredients_db = KNOWLEDGE_BASE.get("ingredients", {})
    
    for key, data in ingredients_db.items():
        search_terms = data.get("aliases", [])
        search_terms.append(key)
        
        for term in search_terms:
            if re.search(r'\b' + re.escape(term.lower()) + r'\b', cleaned_text):
                found_keys.add(key)
                break
    
    logging.info(f"–ü–∞—Ä—Å–µ—Ä –Ω–∞—à–µ–ª —Å–ª–µ–¥—É—é—â–∏–µ –∫–ª—é—á–∏: {list(found_keys)}")
    return list(found_keys)

def find_matching_recipe(found_ingredients_keys: List[str]) -> Dict[str, Any]:
    """
    –ù–∞—Ö–æ–¥–∏—Ç –ù–ê–ò–ë–û–õ–ï–ï –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ä–µ—Ü–µ–ø—Ç, –∞–Ω–∞–ª–∏–∑–∏—Ä—É—è –í–°–ï –≤–∞—Ä–∏–∞–Ω—Ç—ã
    –∏ –≤—ã–±–∏—Ä–∞—è –ª—É—á—à–∏–π –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É.
    """
    recipes_db = KNOWLEDGE_BASE.get("recipes", [])
    found_set = set(found_ingredients_keys)
    
    perfect_matches = []
    partial_matches = []

    for recipe in recipes_db:
        trigger_keys = set(recipe.get("trigger_keys", []))
        if not trigger_keys:
            continue

        # –°—á–∏—Ç–∞–µ–º –∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è, –∏ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —á–∞—Å—Ç–∏
        matching_keys = found_set.intersection(trigger_keys)
        missing_keys = trigger_keys - found_set
        
        # –ï—Å–ª–∏ –≤—Å–µ –∫–ª—é—á–∏ –Ω–∞ –º–µ—Å—Ç–µ ‚Äî —ç—Ç–æ –∏–¥–µ–∞–ª—å–Ω—ã–π –∫–∞–Ω–¥–∏–¥–∞—Ç
        if not missing_keys:
            perfect_matches.append(recipe)
            continue

        # –ï—Å–ª–∏ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ, –Ω–æ –Ω–µ –≤—Å–µ ‚Äî —ç—Ç–æ —á–∞—Å—Ç–∏—á–Ω—ã–π –∫–∞–Ω–¥–∏–¥–∞—Ç
        # –î–æ–±–∞–≤–ª—è–µ–º —É—Å–ª–æ–≤–∏–µ, —á—Ç–æ –Ω–µ —Ö–≤–∞—Ç–∞—Ç—å –¥–æ–ª–∂–Ω–æ –Ω–µ –±–æ–ª–µ–µ 2-—Ö –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤
        if matching_keys and missing_keys and len(missing_keys) <= 2:
            partial_matches.append({
                "recipe": recipe,
                "match_count": len(matching_keys), # –°–∞–º–æ–µ –≤–∞–∂–Ω–æ–µ –Ω–æ–≤–æ–µ –ø–æ–ª–µ!
                "missing_keys": list(missing_keys)
            })

    # –°–Ω–∞—á–∞–ª–∞ –≤—Å–µ–≥–¥–∞ –æ—Ç–¥–∞–µ–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–µ –∏–¥–µ–∞–ª—å–Ω—ã–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è–º
    if perfect_matches:
        best_candidate = sorted(perfect_matches, key=lambda r: r.get("priority", 0), reverse=True)[0]
        logging.info(f"–ù–∞–π–¥–µ–Ω–æ –∏–¥–µ–∞–ª—å–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ: '{best_candidate.get('id')}'")
        return {"status": "perfect", "recipe": best_candidate, "missing_keys": []}

    # –ï—Å–ª–∏ –∏–¥–µ–∞–ª—å–Ω—ã—Ö –Ω–µ—Ç, –∏—â–µ–º –õ–£–ß–®–ï–ï –∏–∑ —á–∞—Å—Ç–∏—á–Ω—ã—Ö
    if partial_matches:
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–Ω–∞—á–∞–ª–∞ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π (—á–µ–º –±–æ–ª—å—à–µ, —Ç–µ–º –ª—É—á—à–µ),
        # –∞ –ø–æ—Ç–æ–º, –≤ —Å–ª—É—á–∞–µ —Ä–∞–≤–µ–Ω—Å—Ç–≤–∞, –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É (—á–µ–º –≤—ã—à–µ, —Ç–µ–º –ª—É—á—à–µ).
        best_candidate_info = sorted(
            partial_matches, 
            key=lambda p: (p["match_count"], p["recipe"].get("priority", 0)), 
            reverse=True
        )[0]
        
        logging.info(f"–ù–∞–π–¥–µ–Ω–æ –õ–£–ß–®–ï–ï —á–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ: '{best_candidate_info['recipe'].get('id')}', —Å–æ–≤–ø–∞–ª–æ: {best_candidate_info['match_count']}, –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç: {best_candidate_info['missing_keys']}")
        return {"status": "partial", "recipe": best_candidate_info["recipe"], "missing_keys": best_candidate_info["missing_keys"]}

    logging.warning(f"–î–ª—è –Ω–∞–±–æ—Ä–∞ {found_ingredients_keys} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –∏–¥–µ–∞–ª—å–Ω—ã—Ö, –Ω–∏ —á–∞—Å—Ç–∏—á–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π.")
    return {"status": "none", "recipe": None, "missing_keys": []}

def find_terms_in_text(text: str) -> List[str]:
    """–°–∫–∞–Ω–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ ID –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤."""
    found_term_ids = set()
    terms_db = KNOWLEDGE_BASE.get("terms", {})
    
    for term_id, term_data in terms_db.items():
        aliases = term_data.get("aliases", [])
        for alias in aliases:
            if re.search(r'\b' + re.escape(alias.lower()) + r'\b', text.lower()):
                found_term_ids.add(term_id)
                break
                
    return list(found_term_ids)

def find_random_recipe_by_category(category: str) -> Optional[Dict[str, Any]]:
    """–ù–∞—Ö–æ–¥–∏—Ç —Å–ª—É—á–∞–π–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏."""
    recipes_db = KNOWLEDGE_BASE.get("recipes", [])
    
    candidates = [
        recipe for recipe in recipes_db 
        if recipe.get("category") == category
    ]
    
    if not candidates:
        logging.warning(f"–î–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ä–µ—Ü–µ–ø—Ç–∞.")
        return None
    
    chosen_recipe = random.choice(candidates)
    logging.info(f"–ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}' –±—ã–ª —Å–ª—É—á–∞–π–Ω–æ –≤—ã–±—Ä–∞–Ω —Ä–µ—Ü–µ–ø—Ç '{chosen_recipe.get('id')}'.")
    
    return chosen_recipe

def assemble_recipe(recipe_template: Dict) -> Dict[str, Any]:
    """–°–æ–±–∏—Ä–∞–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç —Ä–µ—Ü–µ–ø—Ç–∞ –∏ –°–ü–ò–°–û–ö –ù–ê–ô–î–ï–ù–ù–´–• –¢–ï–†–ú–ò–ù–û–í."""
    phrases = KNOWLEDGE_BASE.get("phrases", {})
    ingredients_db = KNOWLEDGE_BASE.get("ingredients", {})
    
    # –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ë–µ—Ä–µ–º —Å—Ç–∞—Ç–∏—á–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
    title = recipe_template.get("title", "–≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç –±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")

    templates = recipe_template.get("templates", {})
    
    def replacer(match):
        full_placeholder = match.group(0)
        key = match.group(1)
        form = match.group(2) if match.group(2) else "nom_sg"
        if key.lower() == "sarcasticcomment":
            return random.choice(phrases.get("sarcastic_comments", [""]))
        if key in ingredients_db:
            if form == "scientific_name":
                return ingredients_db[key].get("scientific_name", key)
            return ingredients_db[key].get("name_forms", {}).get(form, key)
        return full_placeholder

    reagents = re.sub(r'{(\w+):?(\w+)?}', replacer, templates.get("reagents", ""))
    effects = re.sub(r'{(\w+):?(\w+)?}', replacer, templates.get("effects", ""))

    procedure_steps = templates.get("procedure", [])
    formatted_steps = []
    
    if isinstance(procedure_steps, list):
        for i, step in enumerate(procedure_steps, 1):
            processed_step = re.sub(r'{(\w+):?(\w+)?}', replacer, step)
            formatted_steps.append(f"üë®‚Äçüç≥ –®–∞–≥ {i}: {processed_step}")
        procedure = "\n\n".join(formatted_steps)
    else:
        procedure = re.sub(r'{(\w+):?(\w+)?}', replacer, str(procedure_steps))
    
    final_text = f"<b>{title}</b>\n\n{reagents}\n\n{procedure}\n\n{effects}"
    found_terms = find_terms_in_text(final_text)

    return {"text": final_text, "found_terms": found_terms}

def synthesize_response(user_query: str) -> Dict[str, Any]:
    """–ì–ª–∞–≤–Ω–∞—è —É–ø—Ä–∞–≤–ª—è—é—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –°–õ–û–í–ê–†–¨ —Å —Ç–µ–∫—Å—Ç–æ–º –∏ —Ç–µ—Ä–º–∏–Ω–∞–º–∏."""
    found_ingredients = parse_user_query(user_query)
    phrases = KNOWLEDGE_BASE.get("phrases", {})
    ingredients_db = KNOWLEDGE_BASE.get("ingredients", {})
    
    if not found_ingredients:
        return {
            "text": phrases.get("rejection_phrases", {}).get("no_ingredients_found", "–û—à–∏–±–∫–∞."),
            "found_terms": []
        }

    match_result = find_matching_recipe(found_ingredients)

    if match_result["status"] == "perfect":
        return assemble_recipe(match_result["recipe"])
    
    elif match_result["status"] == "partial":
        recipe_name = match_result["recipe"].get("title", "–ù–µ–∫–∏–π –≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç")

        missing_names = []
        for key in match_result["missing_keys"]:
            missing_names.append(ingredients_db.get(key, {}).get("name_forms", {}).get("acc_sg", key))
        missing_ingredients_str = ", ".join(missing_names)

        template = phrases.get("rejection_phrases", {}).get("partial_match_found", "–û—à–∏–±–∫–∞. –®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        
        return {
            "text": template.format(RecipeName=recipe_name, MissingIngredients=missing_ingredients_str),
            "found_terms": []
        }

    else: # status == "none"
        return {
            "text": phrases.get("rejection_phrases", {}).get("no_recipe_found", "–û—à–∏–±–∫–∞."),
            "found_terms": []
        }