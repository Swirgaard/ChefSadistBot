import os
import asyncio
import logging
import random

# –ò–º–ø–æ—Ä—Ç—ã aiogram
from aiogram import Bot, Dispatcher, types, F
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import Command
from aiogram.types import InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –í–°–ï –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
from utils.recipe_synthesizer import (
    KNOWLEDGE_BASE, 
    load_knowledge_base, 
    synthesize_response, 
    find_random_recipe_by_category,
    assemble_recipe,
    find_recipe_by_intention
)

# --- –ë–õ–û–ö –ù–ê–°–¢–†–û–ô–ö–ò ---

os.makedirs("logs", exist_ok=True)
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(name)s - %(message)s',
    handlers=[
        logging.FileHandler("logs/chef_sadist.log", encoding='utf-8'),
        logging.StreamHandler()
    ]
)

from dotenv import load_dotenv
load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN_V2")

if not TELEGRAM_TOKEN:
    raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω —Ç–æ–∫–µ–Ω TELEGRAM_TOKEN_V2 –≤ .env —Ñ–∞–π–ª–µ!")

bot = Bot(token=TELEGRAM_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher()

# –•–†–ê–ù–ò–õ–ò–©–ï –°–ï–°–°–ò–ô
USER_SESSIONS = {}

# --- –°–õ–£–ñ–ï–ë–ù–´–ï –§–£–ù–ö–¶–ò–ò ---

def get_user_session(user_id: int) -> dict:
    """–ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –ø–æ–ª—É—á–∞–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç —Å–µ—Å—Å–∏—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    session = USER_SESSIONS.setdefault(user_id, {})
    session.setdefault("category_clicks", {})
    session.setdefault("seen_recipes", {})
    session.setdefault("total_clicks", 0) # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â–∏–π —Å—á–µ—Ç—á–∏–∫ –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–π –∞–≥—Ä–µ—Å—Å–∏–∏
    return session

def get_main_menu_builder() -> InlineKeyboardBuilder:
    """–°–æ–±–∏—Ä–∞–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –±–∏–ª–¥–µ—Ä –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é."""
    builder = InlineKeyboardBuilder()
    categories = [
        ("üî• –ì–æ—Ä—è—á–µ–µ", "hot_dishes"), 
        ("ü•£ –°—É–ø—ã", "soups"), # <-- –ù–ê–®–ê –ù–û–í–ê–Ø –ö–ê–¢–ï–ì–û–†–ò–Ø
        ("üçù –ü–∞—Å—Ç–∞", "pasta"),
        ("ü•ó –°–∞–ª–∞—Ç—ã", "salads"), 
        ("ü•î –ì–∞—Ä–Ω–∏—Ä—ã", "garnishes"),
        ("üç≥ –ó–∞–≤—Ç—Ä–∞–∫–∏", "breakfasts"),
        ("ü•™ –ë—É—Ç–µ—Ä–±—Ä–æ–¥—ã", "sandwiches"),
        ("üç∞ –î–µ—Å–µ—Ä—Ç—ã", "desserts"),
        ("üå∂Ô∏è –°–æ—É—Å—ã", "sauces"),
        ("üçï –§–∞—Å—Ç—Ñ—É–¥", "fast_food")
    ]
    for text, category_key in categories:
        builder.add(InlineKeyboardButton(text=text, callback_data=f"category_{category_key}"))
    
    builder.adjust(2) # –ù–æ–≤–∞—è, —ç–ª–µ–≥–∞–Ω—Ç–Ω–∞—è —Ä–∞—Å–∫–ª–∞–¥–∫–∞ 5—Ö2
    return builder

async def send_recipe_response(message: types.Message, response_data: dict):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ—Ü–µ–ø—Ç –ò —Å–ª–µ–¥–æ–º - –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ."""
    response_text = response_data["text"]
    found_terms = response_data["found_terms"]
    
    if found_terms:
        builder = InlineKeyboardBuilder()
        terms_db = KNOWLEDGE_BASE.get("terms", {})
        for term_id in found_terms:
            term_name = terms_db.get(term_id, {}).get("aliases", ["–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"])[0]
            builder.add(InlineKeyboardButton(text=f"ü§î –ß—Ç–æ —Ç–∞–∫–æ–µ ¬´{term_name}¬ª?", callback_data=f"term_{term_id}"))
        builder.adjust(1)
        await message.answer(response_text, reply_markup=builder.as_markup())
    else:
        await message.answer(response_text)
        
    logging.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ä–µ—Ü–µ–ø—Ç –¥–ª—è {message.from_user.id}. –ù–∞–π–¥–µ–Ω–æ —Ç–µ—Ä–º–∏–Ω–æ–≤: {len(found_terms)}")

    menu_builder = get_main_menu_builder()
    await message.answer("–ß–µ–≥–æ –∂–µ–ª–∞–µ—à—å —Ç–µ–ø–µ—Ä—å, —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞—Ç–æ—Ä?", reply_markup=menu_builder.as_markup())

# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ---

@dp.message(Command("start", "help"))
async def start_command(message: types.Message):
    """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å–µ—Å—Å–∏—é –∏ –≤—ã–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π."""
    user_id = message.from_user.id
    USER_SESSIONS[user_id] = {"category_clicks": {}, "seen_recipes": {}}
    logging.info(f"–°–µ—Å—Å–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —Å–±—Ä–æ—à–µ–Ω–∞.")

    builder = get_main_menu_builder()
    start_text = (
        "–Ø ‚Äî –ö–∏—Ä–∞. –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–æ—é –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—é.\n\n"
        "–ß–µ–≥–æ –∂–µ–ª–∞–µ—Ç —Ç–≤–æ—è –¥—É—à–∞? –¢—ã –º–æ–∂–µ—à—å –≤—ã–±—Ä–∞—Ç—å **–∫–∞—Ç–µ–≥–æ—Ä–∏—é** –Ω–∏–∂–µ, —á—Ç–æ–±—ã –∏–∑—É—á–∏—Ç—å –º–æ–∏ –ø—Ä–æ—Ç–æ–∫–æ–ª—ã.\n\n"
        "–ò–ª–∏... –ø—Ä–æ—Å—Ç–æ —Å–∫–∞–∂–∏, —á–µ–≥–æ —Ç—ã —Ö–æ—á–µ—à—å. –ù–∞–ø–∏—à–∏ –º–Ω–µ `—Ö–æ—á—É –±–æ—Ä—â` –∏–ª–∏ `–Ω–∞–¥–æ–µ–ª–∞ –≤–∞—Ä–µ–Ω–∞—è –≥—Ä—É–¥–∫–∞`, –∏ —è –ø–æ–π–º—É, —á—Ç–æ —Ç–µ–±–µ –Ω—É–∂–Ω–æ. –≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∏—Ä—É–π."
    )
    await message.answer(start_text, reply_markup=builder.as_markup())
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞ –∏ –ø–æ–ª—É—á–∏–ª –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π.")

CATEGORY_REACTIONS = {
    "hot_dishes": "–¢–æ–ª—å–∫–æ –Ω–µ —Å—ä–µ—à—å –≤—Å–µ —Å—Ä–∞–∑—É. –û—Å–æ–±–µ–Ω–Ω–æ –Ω–∞ –Ω–æ—á—å.",
    "soups": "–ê, —Å—É–ø—ã... –¢–∞ —Å–∞–º–∞—è –∂–∏–¥–∫–∞—è, –≥–æ—Ä—è—á–∞—è (–∏–ª–∏ —Ö–æ–ª–æ–¥–Ω–∞—è) —Å—É–±—Å—Ç–∞–Ω—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è —Å–ª—É–∂–∏—Ç –ø—Ä–µ–ª—é–¥–∏–µ–π –∫ –Ω–∞—Å—Ç–æ—è—â–µ–π –µ–¥–µ. –ò–ª–∏ –∑–∞–º–µ–Ω—è–µ—Ç –µ–µ, –µ—Å–ª–∏ —Ç—ã –Ω–∞ –¥–∏–µ—Ç–µ.",
    "pasta": "–ú–º–º–º, –º–∞–∫–∞—Ä–æ–Ω—ã... –•–æ—Ä–æ—à–∏–π –∞–Ω—Ç–∏–¥–µ–ø—Ä–µ—Å—Å–∞–Ω—Ç. –ï—Å–ª–∏ –≤—ã–±—Ä–∞—Ç—å –±—ã—Å—Ç—Ä–æ.",
    "salads": "–û–≤–æ—â–∏? –ü–æ—Ö–≤–∞–ª—å–Ω–æ. –ù–æ –Ω–µ –¥—É–º–∞–π, —á—Ç–æ —É –º–µ–Ω—è —Ç—É—Ç —Ç–æ–ª—å–∫–æ —Ç—Ä–∞–≤–∞. –ü–æ–∫–æ–ø–∞–π—Å—è, —É –Ω–∞—Å –∏ —Å—ã—Ç–Ω—ã–µ, –º—è—Å–Ω—ã–µ —Å–∞–ª–∞—Ç—ã –∏–º–µ—é—Ç—Å—è. –ò—â–∏.",
    "garnishes": "–í—ã–±—Ä–∞—Ç—å –≥–∞—Ä–Ω–∏—Ä ‚Äî —ç—Ç–æ –ø–æ–ª–¥–µ–ª–∞. –ù–µ –∑–∞–±—É–¥—å –ø—Ä–æ –≥–æ—Ä—è—á–µ–µ, –ø—É—Å—Ç–æ–π –≥–∞—Ä–Ω–∏—Ä –æ–±—ã—á–Ω–æ –æ—á–µ–Ω—å –≥—Ä—É—Å—Ç–Ω–æ –µ—Å—Ç—å. –î–æ–±–∞–≤—å —Ö–æ—Ç—è –±—ã —Å–æ—É—Å.",
    "breakfasts": "–¢—ã —Ç–∞–∫ –¥–æ–ª–≥–æ –≤—ã–±–∏—Ä–∞–µ—à—å –∑–∞–≤—Ç—Ä–∞–∫, —á—Ç–æ –æ–Ω —Å–∫–æ—Ä–æ —Å—Ç–∞–Ω–µ—Ç –æ–±–µ–¥–æ–º.",
    "sandwiches": "–ê, –±—É—Ç–µ—Ä–±—Ä–æ–¥—ã... –ë—ã—Å—Ç—Ä–æ, –ø—Ä–æ—Å—Ç–æ –∏ –ø–æ—á—Ç–∏ –≤—Å–µ–≥–¥–∞ –≤–∫—É—Å–Ω–æ. –ì–ª–∞–≤–Ω–æ–µ ‚Äî –Ω–µ –ø–∏—Ç–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –∏–º–∏.",
    "desserts": "–ù–µ –Ω–∞–¥–æ —Ç–∞–∫ –Ω–∞–ª–µ–≥–∞—Ç—å –Ω–∞ —Å–ª–∞–¥–∫–æ–µ. –ë—ã–≤—à–∏–π (–∏–ª–∏ –±—ã–≤—à–∞—è) —ç—Ç–æ–≥–æ –Ω–µ —Å—Ç–æ–∏—Ç.",
    "sauces": "–ü–æ—Å–º–æ—Ç—Ä–∏, –ø–æ–≤—ã–±–∏—Ä–∞–π, —è –Ω–µ –¥–∞–≤–ª—é. –ù–æ –Ω–µ —Å–æ–∂–≥–∏ –º—è—Å–æ, –ø–æ–∫–∞ —Ç—ã —Ç—É—Ç –∏—â–µ—à—å.",
    "fast_food": "–°—É—Ö–æ–º—è—Ç–∫–∞ ‚Äî –Ω–µ –ª—É—á—à–∏–π –≤—ã–±–æ—Ä. –ù–æ –µ—Å–ª–∏ —Ç—ã –Ω–∞—Å—Ç–æ–ª—å–∫–æ –≥–æ–ª–æ–¥–µ–Ω...",
}

@dp.message()
async def handle_ingredients(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞. V2.0.
    –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ—Ç—Å—è '–ø—Ä–æ—á–∏—Ç–∞—Ç—å –º—ã—Å–ª–∏' (–ø–æ–∏—Å–∫ –ø–æ –Ω–∞–º–µ—Ä–µ–Ω–∏—é),
    –∏ —Ç–æ–ª—å–∫–æ –ø–æ—Ç–æ–º –∏—â–µ—Ç –ø–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞–º.
    """
    if not message.text or message.text.startswith('/'):
        return

    user_query = message.text
    logging.info(f"–ü–æ–ª—É—á–µ–Ω —Ä—É—á–Ω–æ–π –∑–∞–ø—Ä–æ—Å –æ—Ç {message.from_user.id}: '{user_query}'")

    # --- –≠–¢–ê–ü 1: –ü–û–ü–´–¢–ö–ê "–ü–†–û–ß–ò–¢–ê–¢–¨ –ú–´–°–õ–ò" ---
    intended_recipe = find_recipe_by_intention(user_query)
    
    if intended_recipe:
        logging.info(f"–ù–∞–π–¥–µ–Ω–æ –Ω–∞–º–µ—Ä–µ–Ω–∏–µ! –†–µ—Ü–µ–ø—Ç: {intended_recipe['id']}")
        # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ —Ä–µ—Ü–µ–ø—Ç –ø–æ –Ω–∞–º–µ—Ä–µ–Ω–∏—é, —Å—Ä–∞–∑—É –µ–≥–æ —Å–æ–±–∏—Ä–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
        response_data = assemble_recipe(intended_recipe)
        await send_recipe_response(message, response_data)
        return # –í–∞–∂–Ω–æ! –ó–∞–≤–µ—Ä—à–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏.

    # --- –≠–¢–ê–ü 2: –ï–°–õ–ò –ú–´–°–õ–ò –ù–ï –ü–†–û–ß–ò–¢–ê–ù–´ - –ò–©–ï–ú –ü–û –ò–ù–ì–†–ï–î–ò–ï–ù–¢–ê–ú ---
    logging.info("–ù–∞–º–µ—Ä–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ó–∞–ø—É—Å–∫–∞—é –ø–æ–∏—Å–∫ –ø–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞–º...")
    response_data = synthesize_response(user_query)
    await send_recipe_response(message, response_data)

@dp.callback_query(F.data.startswith("term_"))
async def process_term_callback(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ —Å —Ç–µ—Ä–º–∏–Ω–∞–º–∏."""
    term_id = callback_query.data.split("_", 1)[1]
    terms_db = KNOWLEDGE_BASE.get("terms", {})
    term_data = terms_db.get(term_id)
    
    await callback_query.answer()
    if term_data:
        explanation = term_data.get("explanation", "–û–±—ä—è—Å–Ω–µ–Ω–∏–µ –ø–æ—Ç–µ—Ä—è–ª–æ—Å—å...")
        sarcastic_comment = random.choice(term_data.get("sarcastic_comments", ["..."]))
        term_name = term_data.get("aliases", ["–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"])[0].capitalize()
        response_text = (f"<b>üéì –õ–∏–∫–±–µ–∑ –ø–æ —Ç–µ–º–µ ¬´{term_name}¬ª</b>\n\n{explanation}\n\n<i><b>–ú–æ–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> {sarcastic_comment}</i>")
        await callback_query.message.answer(response_text)
    else:
        await callback_query.message.answer("–£–ø—Å... –Ø –∑–∞–±—ã–ª–∞, —á—Ç–æ —ç—Ç–æ –∑–Ω–∞—á–∏—Ç. –ë—ã–≤–∞–µ—Ç.")
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback_query.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –¥–ª—è —Ç–µ—Ä–º–∏–Ω–∞ '{term_id}'.")

@dp.callback_query(F.data.startswith("category_"))
async def process_category_callback(callback_query: types.CallbackQuery):
    """V3.1 - –†–µ–∞–ª–∏–∑—É–µ—Ç '–ú–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤—É—é –ê–≥—Ä–µ—Å—Å–∏—é'."""
    user_id = callback_query.from_user.id
    category = callback_query.data.split("_", 1)[1]
    
    session = get_user_session(user_id)
    
    # --- –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –ú–ù–û–ì–û–£–†–û–í–ù–ï–í–ê–Ø –ê–ì–†–ï–°–°–ò–Ø ---
    
    # –ò–Ω–∫—Ä–µ–º–µ–Ω—Ç–∏—Ä—É–µ–º —Å—á–µ—Ç—á–∏–∫–∏
    session["total_clicks"] += 1
    category_clicks = session["category_clicks"].get(category, 0) + 1
    session["category_clicks"][category] = category_clicks
    
    total_clicks = session["total_clicks"]

    # –£—Ä–æ–≤–µ–Ω—å 3: –ì–ª–æ–±–∞–ª—å–Ω–∞—è —É—Å—Ç–∞–ª–æ—Å—Ç—å (—Å–∞–º—ã–π –≤—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
    if total_clicks > 25:
        await callback_query.answer("–≠—Ç–æ –Ω–µ –∫–ª–∏–∫–µ—Ä, —É–≥–æ–º–æ–Ω–∏—Å—å!", show_alert=True)
        return # –ü—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
    elif total_clicks > 15:
        await callback_query.answer("–•–≤–∞—Ç–∏—Ç –∫–ª–∏–∫–∞—Ç—å, –ø–æ–∂–∞–ª–µ–π –º—ã—à–∫—É.", show_alert=True)
        return # –ü—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ

    # –£—Ä–æ–≤–µ–Ω—å 2: –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–∞—è —ç–º–ø–∞—Ç–∏—è
    REACTION_THRESHOLD = 5 # –ü–æ–¥–Ω–∏–º–∞–µ–º –ø–æ—Ä–æ–≥ –¥–æ 5, –∫–∞–∫ —Ç—ã –∏ –ø—Ä–æ—Å–∏–ª
    if category_clicks == REACTION_THRESHOLD:
        reaction_text = CATEGORY_REACTIONS.get(category, "–£ —Ç–µ–±—è –∫–∞–∫–æ–π-—Ç–æ –æ—Å–æ–±—ã–π –∏–Ω—Ç–µ—Ä–µ—Å –∫ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏...")
        await callback_query.answer(reaction_text, show_alert=True)
        session["category_clicks"][category] = 0 # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –¥–ª—è —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        logging.info(f"–î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —Å—Ä–∞–±–æ—Ç–∞–ª–∞ —Ä–µ–∞–∫—Ü–∏—è –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—é '{category}'.")
    else:
        await callback_query.answer() # –£–±–∏—Ä–∞–µ–º "—á–∞—Å–∏–∫–∏", –µ—Å–ª–∏ –Ω–∏–∫–∞–∫–æ–π alert –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª

    # –£—Ä–æ–≤–µ–Ω—å 1: –õ–æ–≥–∏–∫–∞ —Ä–µ—Ü–µ–ø—Ç–æ–≤ (–æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    # ... (–≤–µ—Å—å –∫–æ–¥, –Ω–∞—á–∏–Ω–∞—è —Å 'recipes_db = ...' –∏ –¥–æ –∫–æ–Ω—Ü–∞, –æ—Å—Ç–∞–µ—Ç—Å—è —Ç–∞–∫–∏–º –∂–µ) ...
    # –Ø –µ–≥–æ –Ω–µ –∫–æ–ø–∏—Ä—É—é —Å—é–¥–∞, —á—Ç–æ–±—ã –Ω–µ –∑–∞–≥—Ä–æ–º–æ–∂–¥–∞—Ç—å. –ü—Ä–æ—Å—Ç–æ –≤—Å—Ç–∞–≤—å –µ–≥–æ –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ –±–ª–æ–∫–∞.

    recipes_db = KNOWLEDGE_BASE.get("recipes", [])
    candidates = [recipe for recipe in recipes_db if recipe.get("category") == category]
    
    if not candidates:
        await callback_query.message.answer(f"–í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ¬´{category}¬ª –ø–æ–∫–∞ –ø—É—Å—Ç–æ.")
        session["category_clicks"][category] = 0
        return
        
    chosen_recipe = random.choice(candidates)
    
    seen_in_category = session["seen_recipes"].setdefault(category, set())

    if chosen_recipe['id'] in seen_in_category:
        await callback_query.message.answer(
            "–ß—Ç–æ, —É–∂–µ –≤–∏–¥–µ–ª —ç—Ç–æ—Ç —Ä–µ—Ü–µ–ø—Ç? –ü—Ä–∞–≤–∏–ª—å–Ω–æ, –Ω–µ—á–µ–≥–æ –Ω–∞ –æ–¥–Ω–∏ –∏ —Ç–µ –∂–µ –∫–Ω–æ–ø–∫–∏ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –¥–∞–≤–∏—Ç—å. "
            "–ù–∞–ø–∏—à–∏ –º–Ω–µ, —á—Ç–æ —É —Ç–µ–±—è –µ—Å—Ç—å –≤ —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–µ, –∏ —è –ø—Ä–µ–¥–ª–æ–∂—É —á—Ç–æ-—Ç–æ –±–æ–ª–µ–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ, –æ—Å–Ω–æ–≤–∞–Ω–Ω–æ–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –∞ –Ω–µ –Ω–∞ —Å–ª–µ–ø–æ–º –ø–µ—Ä–µ–±–æ—Ä–µ."
        )
        seen_in_category.clear()
        session["category_clicks"][category] = 0
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–ª—É—á–∏–ª –ø–æ–≤—Ç–æ—Ä –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}'. –ü–∞–º—è—Ç—å –∏ —Å—á–µ—Ç—á–∏–∫ —Å–±—Ä–æ—à–µ–Ω—ã.")
        return
        
    seen_in_category.add(chosen_recipe['id'])

    if len(seen_in_category) == len(candidates):
        await callback_query.message.answer(f"–ö—Å—Ç–∞—Ç–∏, —Ç—ã —Ç–æ–ª—å–∫–æ —á—Ç–æ –ø–æ—Å–º–æ—Ç—Ä–µ–ª –≤—Å–µ —Ä–µ—Ü–µ–ø—Ç—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ¬´{category}¬ª. –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π –∫—Ä—É–≥.")
        seen_in_category.clear()
        session["category_clicks"][category] = 0

    response_data = assemble_recipe(chosen_recipe)
    await send_recipe_response(callback_query.message, response_data)
        
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –±—ã–ª –≤—ã–¥–∞–Ω —Ä–µ—Ü–µ–ø—Ç '{chosen_recipe['id']}' –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}'. –ö–ª–∏–∫–æ–≤ –ø–æ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {category_clicks}. –í—Å–µ–≥–æ –∫–ª–∏–∫–æ–≤: {total_clicks}.")

# --- –ó–ê–ü–£–°–ö –ë–û–¢–ê ---

async def main():
    try:
        load_knowledge_base()
    except Exception as e:
        logging.critical(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞: {e}", exc_info=True)
        return
    await bot.delete_webhook(drop_pending_updates=True)
    logging.info("–®–µ—Ñ-—Å–∞–¥–∏—Å—Ç (–Ω–∞ –∞—Ç–æ–º–Ω–æ–º —è–¥—Ä–µ) –≤—Ö–æ–¥–∏—Ç –≤ —á–∞—Ç...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    logging.info("–ó–∞–ø—É—Å–∫ –ª–æ–∫–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏...")
    asyncio.run(main())