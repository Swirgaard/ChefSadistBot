import os
import asyncio
import logging
import random

# –ò–º–ø–æ—Ä—Ç—ã aiogram
from aiogram import Bot, Dispatcher, types, F
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import Command
from aiogram.types import InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –í–°–ï –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ recipe_synthesizer
from utils.recipe_synthesizer import (
    KNOWLEDGE_BASE,
    load_knowledge_base,
    synthesize_response,
    find_random_recipe_by_category,
    get_all_cuisines,
    find_random_recipe_by_cuisine,
    assemble_recipe,
    find_recipe_by_intention,
    find_recipe_by_id
)

# --- –ë–õ–û–ö –ù–ê–°–¢–†–û–ô–ö–ò ---

os.makedirs("logs", exist_ok=True)
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(name)s - %(message)s',
    handlers=[
        logging.FileHandler("logs/chef_sadist.log", encoding='utf-8'),
        logging.StreamHandler()
    ]
)

from dotenv import load_dotenv
load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN_V2")

if not TELEGRAM_TOKEN:
    raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω —Ç–æ–∫–µ–Ω TELEGRAM_TOKEN_V2 –≤ .env —Ñ–∞–π–ª–µ!")

bot = Bot(token=TELEGRAM_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher()

# –•–†–ê–ù–ò–õ–ò–©–ï –°–ï–°–°–ò–ô
USER_SESSIONS = {}

# –°–õ–û–í–ê–†–¨ –î–õ–Ø –†–ê–°–ü–û–ó–ù–ê–í–ê–ù–ò–Ø –ö–ê–¢–ï–ì–û–†–ò–ô –í –¢–ï–ö–°–¢–ï
CATEGORY_ALIASES = {
    "hot_dishes": ["–≥–æ—Ä—è—á–µ–µ", "–æ—Å–Ω–æ–≤–Ω–æ–µ –±–ª—é–¥–æ"], "soups": ["—Å—É–ø", "—Å—É–ø—ã", "–ø–æ—Ö–ª–µ–±–∫–∞"],
    "pasta": ["–ø–∞—Å—Ç–∞", "–º–∞–∫–∞—Ä–æ–Ω—ã"], "salads": ["—Å–∞–ª–∞—Ç", "—Å–∞–ª–∞—Ç—ã"],
    "garnishes": ["–≥–∞—Ä–Ω–∏—Ä", "–≥–∞—Ä–Ω–∏—Ä—ã"], "breakfasts": ["–∑–∞–≤—Ç—Ä–∞–∫", "–∑–∞–≤—Ç—Ä–∞–∫–∏"],
    "sandwiches": ["–±—É—Ç–µ—Ä–±—Ä–æ–¥", "–±—É—Ç–µ—Ä–±—Ä–æ–¥—ã", "—Å—ç–Ω–¥–≤–∏—á"], "fried_gold": ["–∂–∞—Ä–µ–Ω–æ–µ", "—Ñ—Ä–∏—Ç—é—Ä"],
    "baked_goods": ["–≤—ã–ø–µ—á–∫–∞", "–ø–∏—Ä–æ–≥", "–ø–∏—Ä–æ–≥–∏"], "desserts": ["–¥–µ—Å–µ—Ä—Ç", "–¥–µ—Å–µ—Ä—Ç—ã", "—Å–ª–∞–¥–∫–æ–µ"],
    "sauces": ["—Å–æ—É—Å", "—Å–æ—É—Å—ã"], "drinks": ["–Ω–∞–ø–∏—Ç–æ–∫", "–Ω–∞–ø–∏—Ç–∫–∏", "–ø–∏—Ç—å"],
    "meats_curing": ["–≤—è–ª–µ–Ω–∏–µ", "–ø–æ—Å–æ–ª", "–≤—è–ª–µ–Ω–æ–µ –º—è—Å–æ", "—Å–æ–ª–µ–Ω–∞—è —Ä—ã–±–∞"],
    "veg_preserves": ["–∫–æ–Ω—Å–µ—Ä–≤–∞—Ü–∏—è", "—Å–æ–ª–µ–Ω—å—è", "–º–∞—Ä–∏–Ω–æ–≤–∞–Ω–∏–µ", "–∑–∞–≥–æ—Ç–æ–≤–∫–∏"]
}

# –°–õ–û–í–ê–†–¨ –î–õ–Ø –ù–ê–ó–í–ê–ù–ò–ô –ö–£–•–û–ù–¨
CUISINE_NAMES = {
    "american": "üá∫üá∏ –ê–º–µ—Ä–∏–∫–∞–Ω—Å–∫–∞—è", "american_fusion": "üá∫üá∏ –§—å—é–∂–Ω (–°–®–ê)", "american_italian": "üá∫üá∏üáÆüáπ –ò—Ç–∞–ª–æ-–∞–º–µ—Ä–∏–∫–∞–Ω—Å–∫–∞—è",
    "argentinian": "üá¶üá∑ –ê—Ä–≥–µ–Ω—Ç–∏–Ω—Å–∫–∞—è", "asian_fusion": "üåè –ê–∑–∏–∞—Ç—Å–∫–∏–π —Ñ—å—é–∂–Ω", "balkan": "üá∑üá∏ –ë–∞–ª–∫–∞–Ω—Å–∫–∞—è",
    "bolivian": "üáßüá¥ –ë–æ–ª–∏–≤–∏–π—Å–∫–∞—è", "brazilian": "üáßüá∑ –ë—Ä–∞–∑–∏–ª—å—Å–∫–∞—è", "caribbean": "üèùÔ∏è –ö–∞—Ä–∏–±—Å–∫–∞—è",
    "central_asian": "üá∫üáø –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–∞–∑–∏–∞—Ç—Å–∫–∞—è", "chinese": "üá®üá≥ –ö–∏—Ç–∞–π—Å–∫–∞—è", "colombian_venezuelan": "üá®üá¥/üáªüá™ –ö–æ–ª—É–º–±–∏—è/–í–µ–Ω–µ—Å—É—ç–ª–∞",
    "cuban": "üá®üá∫ –ö—É–±–∏–Ω—Å–∫–∞—è", "czech": "üá®üáø –ß–µ—à—Å–∫–∞—è", "danish": "üá©üá∞ –î–∞—Ç—Å–∫–∞—è",
    "eastern_european": "üá™üá∫ –í–æ—Å—Ç–æ—á–Ω–æ–µ–≤—Ä–æ–ø–µ–π—Å–∫–∞—è", "egyptian": "üá™üá¨ –ï–≥–∏–ø–µ—Ç—Å–∫–∞—è", "european_classic": "üá™üá∫ –ï–≤—Ä–æ–ø–µ–π—Å–∫–∞—è –∫–ª–∞—Å—Å–∏–∫–∞",
    "finnish": "üá´üáÆ –§–∏–Ω—Å–∫–∞—è", "french": "üá´üá∑ –§—Ä–∞–Ω—Ü—É–∑—Å–∫–∞—è", "fusion": "üåÄ –§—å—é–∂–Ω",
    "georgian": "üá¨üá™ –ì—Ä—É–∑–∏–Ω—Å–∫–∞—è", "german": "üá©üá™ –ù–µ–º–µ—Ü–∫–∞—è", "greek": "üá¨üá∑ –ì—Ä–µ—á–µ—Å–∫–∞—è",
    "hungarian": "üá≠üá∫ –í–µ–Ω–≥–µ—Ä—Å–∫–∞—è", "icelandic": "üáÆüá∏ –ò—Å–ª–∞–Ω–¥—Å–∫–∞—è", "international": "üåç –ò–Ω—Ç–µ—Ä–Ω–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è",
    "irish": "üáÆüá™ –ò—Ä–ª–∞–Ω–¥—Å–∫–∞—è", "italian": "üáÆüáπ –ò—Ç–∞–ª—å—è–Ω—Å–∫–∞—è", "italian_fusion": "üáÆüáπ –§—å—é–∂–Ω (–ò—Ç–∞–ª–∏—è)",
    "jamaican": "üáØüá≤ –Ø–º–∞–π—Å–∫–∞—è", "japanese": "üáØüáµ –Ø–ø–æ–Ω—Å–∫–∞—è", "jewish_soviet": "üïé –ï–≤—Ä–µ–π—Å–∫–∞—è (—Å–æ–≤–µ—Ç—Å–∫–∞—è)",
    "mediterranean": "üåä –°—Ä–µ–¥–∏–∑–µ–º–Ω–æ–º–æ—Ä—Å–∫–∞—è", "mexican": "üá≤üáΩ –ú–µ–∫—Å–∏–∫–∞–Ω—Å–∫–∞—è", "middle_eastern": "üïå –ë–ª–∏–∂–Ω–µ–≤–æ—Å—Ç–æ—á–Ω–∞—è",
    "norwegian": "üá≥üá¥ –ù–æ—Ä–≤–µ–∂—Å–∫–∞—è", "peruvian": "üáµüá™ –ü–µ—Ä—É–∞–Ω—Å–∫–∞—è", "portuguese": "üáµüáπ –ü–æ—Ä—Ç—É–≥–∞–ª—å—Å–∫–∞—è",
    "russian": "üá∑üá∫ –†—É—Å—Å–∫–∞—è", "russian_ukrainian": "üá∑üá∫/üá∫üá¶ –†—É—Å—Å–∫–∞—è/–£–∫—Ä–∞–∏–Ω—Å–∫–∞—è", "scandinavian": "‚ùÑÔ∏è –°–∫–∞–Ω–¥–∏–Ω–∞–≤—Å–∫–∞—è",
    "slovenian": "üá∏üáÆ –°–ª–æ–≤–µ–Ω—Å–∫–∞—è", "soviet_union": "‚ò≠ –°–°–°–† / –ü–æ—Å—Ç—Å–æ–≤–µ—Ç—Å–∫–∞—è", "spanish": "üá™üá∏ –ò—Å–ø–∞–Ω—Å–∫–∞—è",
    "swedish": "üá∏üá™ –®–≤–µ–¥—Å–∫–∞—è", "tatar": "–¢–∞—Ç–∞—Ä—Å–∫–∞—è", "tex-mex": "üá∫üá∏/üá≤üáΩ Tex-Mex", "thai": "üáπüá≠ –¢–∞–π—Å–∫–∞—è"
}

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã—Ö —Ä–µ–∞–∫—Ü–∏–π –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
CATEGORY_REACTIONS = {
    "hot_dishes": "–¢–æ–ª—å–∫–æ –Ω–µ —Å—ä–µ—à—å –≤—Å–µ —Å—Ä–∞–∑—É. –û—Å–æ–±–µ–Ω–Ω–æ –Ω–∞ –Ω–æ—á—å."
}


# --- –°–õ–£–ñ–ï–ë–ù–´–ï –§–£–ù–ö–¶–ò–ò ---

def get_user_session(user_id: int) -> dict:
    """–ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –ø–æ–ª—É—á–∞–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç —Å–µ—Å—Å–∏—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    session = USER_SESSIONS.setdefault(user_id, {})
    session.setdefault("category_clicks", {})
    session.setdefault("seen_recipes", {})
    session.setdefault("cuisine_clicks", {})
    session.setdefault("seen_recipes_cuisine", {})
    session.setdefault("total_clicks", 0)
    session.setdefault("last_menu", "main")
    return session

def get_main_menu_builder() -> InlineKeyboardBuilder:
    """–°–æ–±–∏—Ä–∞–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –±–∏–ª–¥–µ—Ä –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é (–∫–∞—Ç–µ–≥–æ—Ä–∏–π)."""
    builder = InlineKeyboardBuilder()
    categories = [
        ("üî• –ì–æ—Ä—è—á–µ–µ", "hot_dishes"), ("ü•£ –°—É–ø—ã", "soups"), ("üçù –ü–∞—Å—Ç–∞", "pasta"),
        ("ü•ó –°–∞–ª–∞—Ç—ã", "salads"), ("ü•î –ì–∞—Ä–Ω–∏—Ä—ã", "garnishes"), ("üç≥ –ó–∞–≤—Ç—Ä–∞–∫–∏", "breakfasts"),
        ("ü•™ –ë—É—Ç–µ—Ä–±—Ä–æ–¥—ã", "sandwiches"), ("‚ú® –ñ–∞—Ä–µ–Ω–æ–µ –ó–æ–ª–æ—Ç–æ", "fried_gold"), ("ü•ß –í—ã–ø–µ—á–∫–∞", "baked_goods"),
        ("üç∞ –î–µ—Å–µ—Ä—Ç—ã", "desserts"), ("üå∂Ô∏è –°–æ—É—Å—ã", "sauces"), ("üç∏ –ù–∞–ø–∏—Ç–∫–∏", "drinks"),
        ("ü•© –í—è–ª–µ–Ω–∏–µ/–ü–æ—Å–æ–ª", "meats_curing"), ("ü•í –ö–æ–Ω—Å–µ—Ä–≤–∞—Ü–∏—è", "veg_preserves")
    ]
    for text, category_key in categories:
        builder.add(InlineKeyboardButton(text=text, callback_data=f"category_{category_key}"))
    builder.adjust(2)
    builder.row(InlineKeyboardButton(text="üåç –ö—É—Ö–Ω–∏ –ú–∏—Ä–∞", callback_data="show_cuisines"))
    return builder

def get_cuisines_menu_builder() -> InlineKeyboardBuilder:
    """–°–æ–±–∏—Ä–∞–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –±–∏–ª–¥–µ—Ä –¥–ª—è –º–µ–Ω—é –∫—É—Ö–æ–Ω—å –º–∏—Ä–∞."""
    builder = InlineKeyboardBuilder()
    cuisines = get_all_cuisines()
    for cuisine_key in cuisines:
        cuisine_name = CUISINE_NAMES.get(cuisine_key, cuisine_key.capitalize())
        builder.add(InlineKeyboardButton(text=cuisine_name, callback_data=f"cuisine_{cuisine_key}"))
    builder.adjust(2)
    builder.row(InlineKeyboardButton(text="‚Ü©Ô∏è –ì–ª–∞–≤–Ω–æ–µ –ú–µ–Ω—é", callback_data="back_to_main"))
    return builder

async def send_recipe_response(message_or_callback: types.Message | types.CallbackQuery, response_data: dict):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–π –∫–Ω–æ–ø–∫–æ–π '–ù–∞–∑–∞–¥'."""
    user_id = message_or_callback.from_user.id
    target_message = message_or_callback if isinstance(message_or_callback, types.Message) else message_or_callback.message
    
    response_text = response_data["text"]
    found_terms = response_data.get("found_terms", [])
    reply_markup = response_data.get("reply_markup")

    if reply_markup:
        await target_message.answer(response_text, reply_markup=reply_markup)
        return

    builder = InlineKeyboardBuilder()
    if found_terms:
        terms_db = KNOWLEDGE_BASE.get("terms", {})
        for term_id in found_terms:
            term_name = terms_db.get(term_id, {}).get("aliases", ["–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"])[0]
            builder.add(InlineKeyboardButton(text=f"ü§î –ß—Ç–æ —Ç–∞–∫–æ–µ ¬´{term_name}¬ª?", callback_data=f"term_{term_id}"))
        builder.adjust(1)
    
    session = get_user_session(user_id)
    last_menu_context = session.get("last_menu", "main")
    
    if last_menu_context == 'cuisines':
        builder.row(InlineKeyboardButton(text="‚Ü©Ô∏è –ö —Å–ø–∏—Å–∫—É –∫—É—Ö–æ–Ω—å", callback_data="show_cuisines"))
    else:
        builder.row(InlineKeyboardButton(text="‚Ü©Ô∏è –ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="back_to_main"))

    await target_message.answer(response_text, reply_markup=builder.as_markup())
    logging.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ä–µ—Ü–µ–ø—Ç –¥–ª—è {user_id} —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–π –∫–Ω–æ–ø–∫–æ–π '{last_menu_context}'.")

async def send_related_recipes_suggestions(message_or_callback: types.Message | types.CallbackQuery, recipe: dict):
    related_ids = recipe.get("related_recipes")
    if not related_ids: return
    
    target_message = message_or_callback if isinstance(message_or_callback, types.Message) else message_or_callback.message
    builder = InlineKeyboardBuilder()
    found_related_recipes = 0
    for recipe_id in related_ids:
        related_recipe = find_recipe_by_id(recipe_id)
        if related_recipe:
            builder.add(InlineKeyboardButton(text=f"üìú {related_recipe['title']}", callback_data=f"show_recipe_{recipe_id}"))
            found_related_recipes += 1
    if found_related_recipes > 0:
        builder.adjust(1)
        await target_message.answer("–ö—Å—Ç–∞—Ç–∏, –ø–æ —ç—Ç–æ–π —Ç–µ–º–µ —É –º–µ–Ω—è –µ—Å—Ç—å –∏ –¥—Ä—É–≥–∏–µ –ø—Ä–æ—Ç–æ–∫–æ–ª—ã:", reply_markup=builder.as_markup())
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message_or_callback.from_user.id} –ø—Ä–µ–¥–ª–æ–∂–µ–Ω—ã —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã.")

# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ---

async def show_main_menu(message_or_callback: types.Message | types.CallbackQuery, text: str):
    user_id = message_or_callback.from_user.id
    session = get_user_session(user_id)
    session['last_menu'] = 'main'
    builder = get_main_menu_builder()
    target_message = message_or_callback if isinstance(message_or_callback, types.Message) else message_or_callback.message

    if isinstance(message_or_callback, types.CallbackQuery):
        if message_or_callback.message.text != text or message_or_callback.message.reply_markup != builder.as_markup():
            await target_message.edit_text(text, reply_markup=builder.as_markup(), disable_web_page_preview=True)
    else:
        await target_message.answer(text, reply_markup=builder.as_markup(), disable_web_page_preview=True)
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –ø–æ–∫–∞–∑–∞–Ω–æ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")

async def show_cuisines_menu(callback_query: types.CallbackQuery, text: str):
    user_id = callback_query.from_user.id
    session = get_user_session(user_id)
    session['last_menu'] = 'cuisines'
    builder = get_cuisines_menu_builder()
    await callback_query.message.edit_text(text, reply_markup=builder.as_markup())
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –ø–æ–∫–∞–∑–∞–Ω–æ –º–µ–Ω—é –∫—É—Ö–æ–Ω—å.")

@dp.message(Command("start", "help"))
async def start_command(message: types.Message):
    USER_SESSIONS[message.from_user.id] = get_user_session(message.from_user.id)
    logging.info(f"–°–µ—Å—Å–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id} —Å–±—Ä–æ—à–µ–Ω–∞.")
    start_text = (
        "–ü—Ä–∏–≤–µ—Ç, —è ‚Äî –ö–∏—Ä–∞... (—Ç–µ–∫—Å—Ç –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)"
    )
    await show_main_menu(message, start_text)
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞.")

@dp.callback_query(F.data == "back_to_main")
async def back_to_main_callback(callback_query: types.CallbackQuery):
    await callback_query.answer()
    await show_main_menu(callback_query, "–í—ã–±–æ—Ä –∑–∞ —Ç–æ–±–æ–π, –ê—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä. –ù–µ –∑–∞—Å—Ç–∞–≤–ª—è–π –º–µ–Ω—è –∂–¥–∞—Ç—å.")

@dp.callback_query(F.data == "show_cuisines")
async def show_cuisines_callback(callback_query: types.CallbackQuery):
    await callback_query.answer()
    await show_cuisines_menu(callback_query, "–í—ã–±–µ—Ä–∏ –∫—É–ª–∏–Ω–∞—Ä–Ω—É—é –¥–æ–∫—Ç—Ä–∏–Ω—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—á–µ—à—å –∏–∑—É—á–∏—Ç—å.")

@dp.message()
async def handle_ingredients(message: types.Message):
    if not message.text or message.text.startswith('/'): return
    user_id = message.from_user.id
    user_query = message.text.lower().strip()
    logging.info(f"–ü–æ–ª—É—á–µ–Ω —Ä—É—á–Ω–æ–π –∑–∞–ø—Ä–æ—Å –æ—Ç {user_id}: '{user_query}'")
    get_user_session(user_id)['last_menu'] = 'main'

    intended_recipe = find_recipe_by_intention(user_query)
    if intended_recipe:
        response_data = assemble_recipe(intended_recipe)
        await send_recipe_response(message, response_data)
        await send_related_recipes_suggestions(message, intended_recipe)
        return

    found_category = None
    for category_key, aliases in CATEGORY_ALIASES.items():
        if user_query in aliases:
            found_category = category_key
            break
    
    if found_category:
        random_recipe = find_random_recipe_by_category(found_category)
        if random_recipe:
            response_data = assemble_recipe(random_recipe)
            await send_recipe_response(message, response_data)
            await send_related_recipes_suggestions(message, random_recipe)
        else:
            await message.answer(f"–í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ¬´{found_category}¬ª –ø–æ–∫–∞ –ø—É—Å—Ç–æ.")
        return

    response_data = synthesize_response(user_query)
    await send_recipe_response(message, response_data)

@dp.callback_query(F.data.startswith("term_"))
async def process_term_callback(callback_query: types.CallbackQuery):
    term_id = callback_query.data.split("_", 1)[1]
    terms_db = KNOWLEDGE_BASE.get("terms", {})
    term_data = terms_db.get(term_id)
    await callback_query.answer()
    if term_data:
        explanation = term_data.get("explanation", "–û–±—ä—è—Å–Ω–µ–Ω–∏–µ –ø–æ—Ç–µ—Ä—è–ª–æ—Å—å...")
        sarcastic_comment = random.choice(term_data.get("sarcastic_comments", ["..."]))
        term_name = term_data.get("aliases", ["–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"])[0].capitalize()
        response_text = (f"<b>üéì –õ–∏–∫–±–µ–∑ –ø–æ —Ç–µ–º–µ ¬´{term_name}¬ª</b>\n\n{explanation}\n\n<i><b>–ú–æ–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> {sarcastic_comment}</i>")
        await callback_query.message.answer(response_text)
    else:
        await callback_query.message.answer("–£–ø—Å... –Ø –∑–∞–±—ã–ª–∞, —á—Ç–æ —ç—Ç–æ –∑–Ω–∞—á–∏—Ç. –ë—ã–≤–∞–µ—Ç.")

@dp.callback_query(F.data.startswith("cuisine_"))
async def process_cuisine_callback(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    cuisine = callback_query.data.split("_", 1)[1]
    await callback_query.answer()
    session = get_user_session(user_id)
    session['last_menu'] = 'cuisines'

    recipes_in_cuisine = [r for r in KNOWLEDGE_BASE.get("recipes", []) if r.get("cuisine") == cuisine]
    if not recipes_in_cuisine:
        await callback_query.message.edit_text(f"–í –¥–æ–∫—Ç—Ä–∏–Ω–µ ¬´{CUISINE_NAMES.get(cuisine, cuisine)}¬ª –ø–æ–∫–∞ –ø—É—Å—Ç–æ. –Ø —ç—Ç–æ –∑–∞–ø–æ–º–Ω—é.")
        return

    seen_in_cuisine = session["seen_recipes_cuisine"].setdefault(cuisine, set())
    available_recipes = [r for r in recipes_in_cuisine if r['id'] not in seen_in_cuisine]
    
    if not available_recipes:
        await callback_query.message.answer(f"–ö—Å—Ç–∞—Ç–∏, —Ç—ã —Ç–æ–ª—å–∫–æ —á—Ç–æ –∏–∑—É—á–∏–ª –≤—Å–µ –ø—Ä–æ—Ç–æ–∫–æ–ª—ã –¥–æ–∫—Ç—Ä–∏–Ω—ã ¬´{CUISINE_NAMES.get(cuisine, cuisine)}¬ª. –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π —Ü–∏–∫–ª –ø–æ–∑–Ω–∞–Ω–∏—è.")
        seen_in_cuisine.clear()
        available_recipes = recipes_in_cuisine

    chosen_recipe = random.choice(available_recipes)
    seen_in_cuisine.add(chosen_recipe['id'])

    response_data = assemble_recipe(chosen_recipe)
    await send_recipe_response(callback_query, response_data)
    await send_related_recipes_suggestions(callback_query, chosen_recipe)

@dp.callback_query(F.data.startswith("category_"))
async def process_category_callback(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    category = callback_query.data.split("_", 1)[1]
    session = get_user_session(user_id)
    session['last_menu'] = 'main'
    await callback_query.answer()

    recipes_db = KNOWLEDGE_BASE.get("recipes", [])
    candidates = [recipe for recipe in recipes_db if recipe.get("category") == category]
    
    if not candidates:
        await callback_query.message.edit_text(f"–í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ¬´{category}¬ª –ø–æ–∫–∞ –ø—É—Å—Ç–æ.")
        return
        
    seen_in_category = session["seen_recipes"].setdefault(category, set())
    available_recipes = [r for r in candidates if r['id'] not in seen_in_category]

    if not available_recipes:
        await callback_query.message.answer(f"–ö—Å—Ç–∞—Ç–∏, —Ç—ã —Ç–æ–ª—å–∫–æ —á—Ç–æ –ø–æ—Å–º–æ—Ç—Ä–µ–ª –≤—Å–µ —Ä–µ—Ü–µ–ø—Ç—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ¬´{category}¬ª. –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π –∫—Ä—É–≥.")
        seen_in_category.clear()
        available_recipes = candidates

    chosen_recipe = random.choice(available_recipes)
    seen_in_category.add(chosen_recipe['id'])

    response_data = assemble_recipe(chosen_recipe)
    await send_recipe_response(callback_query, response_data)
    await send_related_recipes_suggestions(callback_query, chosen_recipe)

@dp.callback_query(F.data.startswith("show_recipe_"))
async def process_show_recipe_callback(callback_query: types.CallbackQuery):
    await callback_query.answer()
    recipe_id = callback_query.data.removeprefix("show_recipe_")
    chosen_recipe = find_recipe_by_id(recipe_id)

    if chosen_recipe:
        response_data = assemble_recipe(chosen_recipe)
        await send_recipe_response(callback_query, response_data)
        await send_related_recipes_suggestions(callback_query, chosen_recipe)
    else:
        logging.error(f"–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ –Ω–∞–π–¥–µ–Ω —Ä–µ—Ü–µ–ø—Ç —Å ID '{recipe_id}'!")
        await callback_query.message.answer("–ò–∑–≤–∏–Ω–∏, —ç—Ç–æ—Ç —Ä–µ—Ü–µ–ø—Ç –∫—É–¥–∞-—Ç–æ –ø—Ä–æ–ø–∞–ª –∏–∑ –º–æ–µ–π –ø–∞–º—è—Ç–∏.")
        await show_main_menu(callback_query, "–ü–æ–ø—Ä–æ–±—É–π –≤—ã–±—Ä–∞—Ç—å —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ.")

# --- –ó–ê–ü–£–°–ö –ë–û–¢–ê ---

async def main():
    try:
        load_knowledge_base()
    except Exception as e:
        logging.critical(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞: {e}", exc_info=True)
        return
    await bot.delete_webhook(drop_pending_updates=True)
    logging.info("–®–µ—Ñ-—Å–∞–¥–∏—Å—Ç (–Ω–∞ –∞—Ç–æ–º–Ω–æ–º —è–¥—Ä–µ) –≤—Ö–æ–¥–∏—Ç –≤ —á–∞—Ç...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    logging.info("–ó–∞–ø—É—Å–∫ –ª–æ–∫–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏...")
    asyncio.run(main())