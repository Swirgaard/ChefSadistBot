import os
import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.client.default import DefaultBotProperties
from dotenv import load_dotenv
import google.generativeai as genai

from utils.google_ai_requests import generate_recipe
from utils.recipe_formatter import format_recipe
from utils.error_handlers import register_error_handlers
from utils.middlewares.throttling import ThrottlingMiddleware

# –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –ª–æ–≥–æ–≤ –ü–ï–†–ï–î —Ç–µ–º, –∫–∞–∫ –ø—ã—Ç–∞–µ–º—Å—è –≤ –Ω–µ–µ –ø–∏—Å–∞—Ç—å.
os.makedirs("logs", exist_ok=True)

# –ê—Å–∫–µ—Ç–∏—á–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑ —Ü–≤–µ—Ç–∞
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(name)s - %(message)s',
    handlers=[
        logging.FileHandler("logs/chef_sadist.log", encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logging.getLogger("httpx").setLevel(logging.WARNING)
logging.getLogger("aiogram").setLevel(logging.WARNING)

# load_dotenv() –ø–æ–ø—ã—Ç–∞–µ—Ç—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å .env –ª–æ–∫–∞–ª—å–Ω–æ, –Ω–æ –Ω–µ –≤—ã–∑–æ–≤–µ—Ç –æ—à–∏–±–∫—É –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
load_dotenv() 

class Config:
    TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
    GOOGLE_AI_KEY = os.getenv("GOOGLE_AI_KEY")

if not Config.TELEGRAM_TOKEN or not Config.GOOGLE_AI_KEY:
    raise ValueError("–ö–ª—é—á–µ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ (TELEGRAM_TOKEN, GOOGLE_AI_KEY) –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")

async def check_tokens(bot_instance: Bot, google_key: str) -> bool:
    logging.info("–ù–∞—á–∏–Ω–∞—é –ø—Ä–µ–¥–ø–æ–ª–µ—Ç–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —Ç–æ–∫–µ–Ω–æ–≤...")
    try:
        me = await bot_instance.get_me()
        logging.info(f"‚úÖ –¢–æ–∫–µ–Ω Telegram –≤–∞–ª–∏–¥–µ–Ω. –ë–æ—Ç: @{me.username}")
    except Exception as e:
        logging.critical(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –¢–æ–∫–µ–Ω Telegram –ù–ï–í–ê–õ–ò–î–ï–ù –∏–ª–∏ –Ω–µ—Ç —Å–≤—è–∑–∏ —Å API. –û—à–∏–±–∫–∞: {e}")
        return False
    
    try:
        genai.configure(api_key=google_key)
        _ = genai.get_model('models/gemini-1.5-pro-latest')
        logging.info("‚úÖ –ö–ª—é—á Google AI –≤–∞–ª–∏–¥–µ–Ω –∏ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø –∫ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏.")
    except Exception as e:
        logging.critical(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ö–ª—é—á Google AI –ù–ï–í–ê–õ–ò–î–ï–ù –∏–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ API. –û—à–∏–±–∫–∞: {e}")
        return False
    return True

bot = Bot(token=Config.TELEGRAM_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher()

@dp.message(Command("start"))
async def start_command(message: types.Message):
    await message.answer(
        "–Ø ‚Äî –®–µ—Ñ. –ê —Ç—ã ‚Äî –∂–∞–ª–∫–æ–µ –Ω–∏—á—Ç–æ–∂–µ—Å—Ç–≤–æ..." # –∏ —Ç–∞–∫ –¥–∞–ª–µ–µ
    )
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞.")

@dp.message()
async def handle_ingredients(message: types.Message):
    user_id = message.from_user.id
    if not message.text or message.text.startswith('/'): return
    logging.info(f"–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –æ—Ç {user_id}: '{message.text[:50]}...'")
    if len(message.text.split(',')) < 2:
        await message.answer("–¢—ã –∏–∑–¥–µ–≤–∞–µ—à—å—Å—è? –ú–Ω–µ –Ω—É–∂–Ω–æ –∫–∞–∫ –º–∏–Ω–∏–º—É–º –¥–≤–∞ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞...")
        return
    
    processing_message = await message.answer("üî™ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ç–≤–æ–∏ –ø–æ–º–æ–∏... –ñ–¥–∏.")
    try:
        raw_recipe = await generate_recipe(message.text, Config.GOOGLE_AI_KEY)
        if raw_recipe.startswith("‚ö†Ô∏è"):
            await message.answer(raw_recipe)
        else:
            formatted_recipe = format_recipe(raw_recipe)
            await message.answer(formatted_recipe)
    except Exception as e:
        logging.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ handle_ingredients –¥–ª—è {user_id}: {e}", exc_info=True)
        await message.answer("–ß—Ç–æ-—Ç–æ —Å–ª–æ–º–∞–ª–æ—Å—å –≤ –º–æ–µ–π –≥–æ–ª–æ–≤–µ.")
    finally:
        await bot.delete_message(chat_id=message.chat.id, message_id=processing_message.message_id)

async def main():
    if not await check_tokens(bot, Config.GOOGLE_AI_KEY):
        return
    dp.message.middleware(ThrottlingMiddleware(throttle_time_sec=5))
    register_error_handlers(dp)
    await bot.delete_webhook(drop_pending_updates=True)
    logging.info("–®–µ—Ñ-—Å–∞–¥–∏—Å—Ç (–Ω–∞ –¥–≤–∏–∂–∫–µ Google AI) –≤—Ö–æ–¥–∏—Ç –≤ —á–∞—Ç...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    logging.info("–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–Ω–æ–π –≤–µ—Ä—Å–∏–∏...")
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logging.info("–ó–∞–≤–µ—Ä—à–∞—é —Ä–∞–±–æ—Ç—É...")