import os
import asyncio
import logging
import random

# –ò–º–ø–æ—Ä—Ç—ã aiogram
from aiogram import Bot, Dispatcher, types, F
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import Command
from aiogram.types import InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –í–°–ï –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ recipe_synthesizer
from utils.recipe_synthesizer import (
    KNOWLEDGE_BASE,
    load_knowledge_base,
    synthesize_response,
    find_random_recipe_by_category,
    assemble_recipe,
    find_recipe_by_intention,
    find_recipe_by_id
)

# --- –ë–õ–û–ö –ù–ê–°–¢–†–û–ô–ö–ò ---

os.makedirs("logs", exist_ok=True)
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(name)s - %(message)s',
    handlers=[
        logging.FileHandler("logs/chef_sadist.log", encoding='utf-8'),
        logging.StreamHandler()
    ]
)

from dotenv import load_dotenv
load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN_V2")

if not TELEGRAM_TOKEN:
    raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω —Ç–æ–∫–µ–Ω TELEGRAM_TOKEN_V2 –≤ .env —Ñ–∞–π–ª–µ!")

bot = Bot(token=TELEGRAM_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher()

# –•–†–ê–ù–ò–õ–ò–©–ï –°–ï–°–°–ò–ô
USER_SESSIONS = {}

# –°–õ–û–í–ê–†–¨ –î–õ–Ø –†–ê–°–ü–û–ó–ù–ê–í–ê–ù–ò–Ø –ö–ê–¢–ï–ì–û–†–ò–ô –í –¢–ï–ö–°–¢–ï
CATEGORY_ALIASES = {
    "hot_dishes": ["–≥–æ—Ä—è—á–µ–µ", "–æ—Å–Ω–æ–≤–Ω–æ–µ –±–ª—é–¥–æ"],
    "soups": ["—Å—É–ø", "—Å—É–ø—ã", "–ø–æ—Ö–ª–µ–±–∫–∞"],
    "pasta": ["–ø–∞—Å—Ç–∞", "–º–∞–∫–∞—Ä–æ–Ω—ã"],
    "salads": ["—Å–∞–ª–∞—Ç", "—Å–∞–ª–∞—Ç—ã"],
    "garnishes": ["–≥–∞—Ä–Ω–∏—Ä", "–≥–∞—Ä–Ω–∏—Ä—ã"],
    "breakfasts": ["–∑–∞–≤—Ç—Ä–∞–∫", "–∑–∞–≤—Ç—Ä–∞–∫–∏"],
    "sandwiches": ["–±—É—Ç–µ—Ä–±—Ä–æ–¥", "–±—É—Ç–µ—Ä–±—Ä–æ–¥—ã", "—Å—ç–Ω–¥–≤–∏—á"],
    "fried_gold": ["–∂–∞—Ä–µ–Ω–æ–µ", "—Ñ—Ä–∏—Ç—é—Ä"],
    "baked_goods": ["–≤—ã–ø–µ—á–∫–∞", "–ø–∏—Ä–æ–≥", "–ø–∏—Ä–æ–≥–∏"],
    "desserts": ["–¥–µ—Å–µ—Ä—Ç", "–¥–µ—Å–µ—Ä—Ç—ã", "—Å–ª–∞–¥–∫–æ–µ"],
    "sauces": ["—Å–æ—É—Å", "—Å–æ—É—Å—ã"],
    "drinks": ["–Ω–∞–ø–∏—Ç–æ–∫", "–Ω–∞–ø–∏—Ç–∫–∏", "–ø–∏—Ç—å"]
}

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã—Ö —Ä–µ–∞–∫—Ü–∏–π –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–í–û–°–°–¢–ê–ù–û–í–õ–ï–ù)
CATEGORY_REACTIONS = {
    "hot_dishes": "–¢–æ–ª—å–∫–æ –Ω–µ —Å—ä–µ—à—å –≤—Å–µ —Å—Ä–∞–∑—É. –û—Å–æ–±–µ–Ω–Ω–æ –Ω–∞ –Ω–æ—á—å.",
    "soups": "–ê, —Å—É–ø—ã... –¢–∞ —Å–∞–º–∞—è –∂–∏–¥–∫–∞—è, –≥–æ—Ä—è—á–∞—è (–∏–ª–∏ —Ö–æ–ª–æ–¥–Ω–∞—è) —Å—É–±—Å—Ç–∞–Ω—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è —Å–ª—É–∂–∏—Ç –ø—Ä–µ–ª—é–¥–∏–µ–π –∫ –Ω–∞—Å—Ç–æ—è—â–µ–π –µ–¥–µ. –ò–ª–∏ –∑–∞–º–µ–Ω—è–µ—Ç –µ–µ, –µ—Å–ª–∏ —Ç—ã –Ω–∞ –¥–∏–µ—Ç–µ.",
    "pasta": "–ú–º–º–º, –º–∞–∫–∞—Ä–æ–Ω—ã... –•–æ—Ä–æ—à–∏–π –∞–Ω—Ç–∏–¥–µ–ø—Ä–µ—Å—Å–∞–Ω—Ç. –ï—Å–ª–∏ –≤—ã–±—Ä–∞—Ç—å –±—ã—Å—Ç—Ä–æ.",
    "salads": "–û–≤–æ—â–∏? –ü–æ—Ö–≤–∞–ª—å–Ω–æ. –ù–æ –Ω–µ –¥—É–º–∞–π, —á—Ç–æ —É –º–µ–Ω—è —Ç—É—Ç —Ç–æ–ª—å–∫–æ —Ç—Ä–∞–≤–∞. –ü–æ–∫–æ–ø–∞–π—Å—è, —É –Ω–∞—Å –∏ —Å—ã—Ç–Ω—ã–µ, –º—è—Å–Ω—ã–µ —Å–∞–ª–∞—Ç—ã –∏–º–µ—é—Ç—Å—è. –ò—â–∏.",
    "garnishes": "–í—ã–±—Ä–∞—Ç—å –≥–∞—Ä–Ω–∏—Ä ‚Äî —ç—Ç–æ –ø–æ–ª–¥–µ–ª–∞. –ù–µ –∑–∞–±—É–¥—å –ø—Ä–æ –≥–æ—Ä—è—á–µ–µ, –ø—É—Å—Ç–æ–π –≥–∞—Ä–Ω–∏—Ä –æ–±—ã—á–Ω–æ –æ—á–µ–Ω—å –≥—Ä—É—Å—Ç–Ω–æ –µ—Å—Ç—å. –î–æ–±–∞–≤—å —Ö–æ—Ç—è –±—ã —Å–æ—É—Å.",
    "breakfasts": "–¢—ã —Ç–∞–∫ –¥–æ–ª–≥–æ –≤—ã–±–∏—Ä–∞–µ—à—å –∑–∞–≤—Ç—Ä–∞–∫, —á—Ç–æ –æ–Ω —Å–∫–æ—Ä–æ —Å—Ç–∞–Ω–µ—Ç –æ–±–µ–¥–æ–º.",
    "sandwiches": "–ê, –±—É—Ç–µ—Ä–±—Ä–æ–¥—ã... –ë—ã—Å—Ç—Ä–æ, –ø—Ä–æ—Å—Ç–æ –∏ –ø–æ—á—Ç–∏ –≤—Å–µ–≥–¥–∞ –≤–∫—É—Å–Ω–æ. –ì–ª–∞–≤–Ω–æ–µ ‚Äî –Ω–µ –ø–∏—Ç–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –∏–º–∏.",
    "desserts": "–ù–µ –Ω–∞–¥–æ —Ç–∞–∫ –Ω–∞–ª–µ–≥–∞—Ç—å –Ω–∞ —Å–ª–∞–¥–∫–æ–µ. –ë—ã–≤—à–∏–π (–∏–ª–∏ –±—ã–≤—à–∞—è) —ç—Ç–æ–≥–æ –Ω–µ —Å—Ç–æ–∏—Ç.",
    "sauces": "–ü–æ—Å–º–æ—Ç—Ä–∏, –ø–æ–≤—ã–±–∏—Ä–∞–π, —è –Ω–µ –¥–∞–≤–ª—é. –ù–æ –Ω–µ —Å–æ–∂–≥–∏ –º—è—Å–æ, –ø–æ–∫–∞ —Ç—ã —Ç—É—Ç –∏—â–µ—à—å.",
    "fast_food": "–°—É—Ö–æ–º—è—Ç–∫–∞ ‚Äî –Ω–µ –ª—É—á—à–∏–π –≤—ã–±–æ—Ä. –ù–æ –µ—Å–ª–∏ —Ç—ã –Ω–∞—Å—Ç–æ–ª—å–∫–æ –≥–æ–ª–æ–¥–µ–Ω...",
    "fried_gold": "–ê, —ç—Ç–æ —Å–∞–º–æ–µ –≤—Ä–µ–¥–Ω–æ–µ... –∏ —Å–∞–º–æ–µ –≤–∫—É—Å–Ω–æ–µ! –°–º–æ—Ç—Ä–∏ –Ω–µ —Å–æ–∂–≥–∏, –∞ —Ç–æ –±—É–¥–µ—Ç –Ω–µ –∑–æ–ª–æ—Ç–æ, –∞ —É–≥–æ–ª—å.",
    "drinks": "–ù–∞–ø–∏—Ç–∫–∏? –•–æ—Ä–æ—à–æ. –ì–ª–∞–≤–Ω–æ–µ ‚Äî —á—Ç–æ–±—ã –ø–æ—Ç–æ–º –Ω–µ –ø—Ä–∏—à–ª–æ—Å—å –≤—ã–∑—ã–≤–∞—Ç—å '–°–∫–æ—Ä—É—é –ø–æ–º–æ—â—å'. –ò—â–∏, —á—Ç–æ —Ç–µ–±–µ –ø–æ –≤–∫—É—Å—É.",
    "baked_goods": "–í—ã–ø–µ—á–∫–∞... –ß—É–¥–µ—Å–Ω–æ. –≠—Ç–æ —Ç–æ, —á—Ç–æ –¥–µ–ª–∞–µ—Ç —Ç–≤–æ—é –∂–∏–∑–Ω—å —á—É—Ç—å —Å–ª–∞—â–µ. –ò —Ç–≤–æ—é —Ç–∞–ª–∏—é ‚Äî —á—É—Ç—å —à–∏—Ä–µ. –í—ã–±–∏—Ä–∞–π –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ.",
}


# --- –°–õ–£–ñ–ï–ë–ù–´–ï –§–£–ù–ö–¶–ò–ò ---

def get_user_session(user_id: int) -> dict:
    """–ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –ø–æ–ª—É—á–∞–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç —Å–µ—Å—Å–∏—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    session = USER_SESSIONS.setdefault(user_id, {})
    session.setdefault("category_clicks", {})
    session.setdefault("seen_recipes", {})
    session.setdefault("total_clicks", 0)
    return session

def get_main_menu_builder() -> InlineKeyboardBuilder:
    """–°–æ–±–∏—Ä–∞–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –±–∏–ª–¥–µ—Ä –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é."""
    builder = InlineKeyboardBuilder()
    categories = [
        ("üî• –ì–æ—Ä—è—á–µ–µ", "hot_dishes"),
        ("ü•£ –°—É–ø—ã", "soups"),
        ("üçù –ü–∞—Å—Ç–∞", "pasta"),
        ("ü•ó –°–∞–ª–∞—Ç—ã", "salads"),
        ("ü•î –ì–∞—Ä–Ω–∏—Ä—ã", "garnishes"),
        ("üç≥ –ó–∞–≤—Ç—Ä–∞–∫–∏", "breakfasts"),
        ("ü•™ –ë—É—Ç–µ—Ä–±—Ä–æ–¥—ã", "sandwiches"),
        ("‚ú® –ñ–∞—Ä–µ–Ω–æ–µ –ó–æ–ª–æ—Ç–æ", "fried_gold"),
        ("ü•ß –í—ã–ø–µ—á–∫–∞", "baked_goods"),
        ("üç∞ –î–µ—Å–µ—Ä—Ç—ã", "desserts"),
        ("üå∂Ô∏è –°–æ—É—Å—ã", "sauces"),
        ("üç∏ –ù–∞–ø–∏—Ç–∫–∏", "drinks")
    ]
    for text, category_key in categories:
        builder.add(InlineKeyboardButton(text=text, callback_data=f"category_{category_key}"))

    builder.adjust(3)
    return builder

async def send_recipe_response(message: types.Message, response_data: dict):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞."""
    response_text = response_data["text"]
    found_terms = response_data.get("found_terms", [])
    reply_markup = response_data.get("reply_markup")

    if reply_markup:
        await message.answer(response_text, reply_markup=reply_markup)
    elif found_terms:
        builder = InlineKeyboardBuilder()
        terms_db = KNOWLEDGE_BASE.get("terms", {})
        for term_id in found_terms:
            term_name = terms_db.get(term_id, {}).get("aliases", ["–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"])[0]
            builder.add(InlineKeyboardButton(text=f"ü§î –ß—Ç–æ —Ç–∞–∫–æ–µ ¬´{term_name}¬ª?", callback_data=f"term_{term_id}"))
        builder.adjust(1)
        await message.answer(response_text, reply_markup=builder.as_markup())
    else:
        await message.answer(response_text)

    logging.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–≤–µ—Ç –¥–ª—è {message.from_user.id}.")

    menu_builder = get_main_menu_builder()
    await message.answer("–ß–µ–≥–æ –∂–µ–ª–∞–µ—à—å —Ç–µ–ø–µ—Ä—å, —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞—Ç–æ—Ä?", reply_markup=menu_builder.as_markup())

async def send_related_recipes_suggestions(message: types.Message, recipe: dict):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ —É —Ä–µ—Ü–µ–ø—Ç–∞ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ç–æ–∫–æ–ª—ã, –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç
    —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏-–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–∞–π–¥–µ–Ω—ã.
    """
    related_ids = recipe.get("related_recipes")
    if not related_ids:
        return

    builder = InlineKeyboardBuilder()
    found_related_recipes = 0
    for recipe_id in related_ids:
        related_recipe = find_recipe_by_id(recipe_id)
        if related_recipe:
            builder.add(InlineKeyboardButton(
                text=f"üìú {related_recipe['title']}",
                callback_data=f"show_recipe_{recipe_id}"
            ))
            found_related_recipes += 1

    if found_related_recipes > 0:
        builder.adjust(1)
        await message.answer(
            "–ö—Å—Ç–∞—Ç–∏, –ø–æ —ç—Ç–æ–π —Ç–µ–º–µ —É –º–µ–Ω—è –µ—Å—Ç—å –∏ –¥—Ä—É–≥–∏–µ –ø—Ä–æ—Ç–æ–∫–æ–ª—ã:",
            reply_markup=builder.as_markup()
        )
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.from_user.id} –ø—Ä–µ–¥–ª–æ–∂–µ–Ω—ã —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã –¥–ª—è '{recipe['id']}'.")

# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ---

@dp.message(Command("start", "help"))
async def start_command(message: types.Message):
    """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å–µ—Å—Å–∏—é –∏ –≤—ã–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π."""
    user_id = message.from_user.id
    USER_SESSIONS[user_id] = {"category_clicks": {}, "seen_recipes": {}, "total_clicks": 0}
    logging.info(f"–°–µ—Å—Å–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —Å–±—Ä–æ—à–µ–Ω–∞.")

    builder = get_main_menu_builder()
    start_text = (
        "–ü—Ä–∏–≤–µ—Ç, —è ‚Äî –ö–∏—Ä–∞, —Ä—ã–∂–∏–π —É—Ä–∞–≥–∞–Ω, –∏ –º—ã —Å —Ç–æ–±–æ–π –Ω–∞ –º–æ–µ–π –∫—É—Ö–Ω–µ. –Ø —Ç–µ–±–µ —Ä–∞–¥–∞, —Ç—ã —Ç—É—Ç –≥–æ—Å—Ç—å, –Ω–æ –¥–∞–≤–∞–π –±—É–¥–µ–º —á–µ—Å—Ç–Ω—ã: —Ç—ã –ø—Ä–∏—à–µ–ª —Å—é–¥–∞ (–∏–ª–∏ –ø—Ä–∏—à–ª–∞) –∑–∞ —Ä–µ—Ü–µ–ø—Ç–æ–º –∏, –≤–æ–∑–º–æ–∂–Ω–æ, –∑–∞ –ø–æ—Ä—Ü–∏–µ–π –º–æ–µ–≥–æ —Ñ–∏—Ä–º–µ–Ω–Ω–æ–≥–æ —Å–∞—Ä–∫–∞–∑–º–∞.\n\n"
        "–ß—Ç–æ —Ç—ã –º–æ–∂–µ—à—å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å:\n\n"
        "1. –ü–æ—Ç—ã–∫–∞—Ç—å—Å—è –≤ –∫–Ω–æ–ø–æ—á–∫–∏ –∏ –≤–æ–∑–º–æ–∂–Ω–æ, –Ω–∞–π—Ç–∏ –Ω—É–∂–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç. –£ –Ω–∞—Å –∏—Ö –º–Ω–æ–≥–æ, –ø—Ä–æ–±—É–π, –Ω–æ –Ω–µ —É–¥–∏–≤–ª—è–π—Å—è –ø–æ–≤—Ç–æ—Ä–∞–º –∏ –µ–¥–∫–∏–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º.\n"
        "2. –ù–∞–ø–∏—Å–∞—Ç—å, —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å. –ü–∏—Ü—Ü—É, –∫–æ—Ç–ª–µ—Ç—ã, –±—É—Ç–µ—Ä–±—Ä–æ–¥, —è–∏—á–Ω–∏—Ü—É ‚Äî —è –ø–æ–¥—Å–∫–∞–∂—É. –ê –µ—Å–ª–∏ –æ—Å–º–µ–ª–∏—à—å—Å—è, —É –º–µ–Ω—è –µ—Å—Ç—å —Ä–µ—Ü–µ–ø—Ç—ã –Ω–∞—Å—Ç–æ—è—â–µ–π –∫–∞—Ä–±–æ–Ω–∞—Ä—ã, —á–∏–∑–∫–µ–π–∫–∞ ‚Äî —Ç–æ–ª—å–∫–æ —Å–ø—Ä–æ—Å–∏.\n"
        "3. –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏, —á—Ç–æ –Ω–∞—à–µ–ª (–∏–ª–∏ –Ω–∞—à–ª–∞) –≤ —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–µ. –û—Å—É–∂–¥–∞—Ç—å –Ω–µ –±—É–¥—É, –∏ –¥–∞–∂–µ –ø–æ–¥—Å–∫–∞–∂—É, —á—Ç–æ –µ—â–µ –º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è.\n\n"
        "–ö—Å—Ç–∞—Ç–∏, –µ—Å–ª–∏ —Ö–æ—á–µ—à—å –ø–æ–≥—Ä—É–∑–∏—Ç—å—Å—è –≥–ª—É–±–∂–µ –≤ —Ñ–∏–ª–æ—Å–æ—Ñ–∏—é –∫—É–ª–∏–Ω–∞—Ä–Ω–æ–≥–æ –¥–æ–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –Ω–æ–≤—ã–µ –≥–ª–∞–≤—ã –º–æ–µ–π –º—É–¥—Ä–æ—Å—Ç–∏, –∑–∞–≥–ª—è–Ω–∏ –≤ –º–æ–π –∫–∞–Ω–∞–ª '–î–Ω–µ–≤–Ω–∏–∫ –ø–æ–≤–∞—Ä–∞-—Å–∞–¥–∏—Å—Ç–∞': <a href='https://t.me/dnevnik_povara_sadista'>@DnevnikPovaraSadista</a>.\n\n"
        "–ü—Ä–æ–±—É–π. –ö–∞–∫ —Å–∫–∞–∑–∞–ª –ì–æ–º–µ—Ä –°–∏–º–ø—Å–æ–Ω, \"—è –ø—Ä–∏—à–µ–ª —Å—é–¥–∞, —á—Ç–æ–±—ã –º–µ–Ω—è –ø–∏—á–∫–∞–ª–∏ —Ç–∞–±–ª–µ—Ç–∫–∞–º–∏ –∏ –±–∏–ª–∏ —Ç–æ–∫–æ–º, –∞ –Ω–µ —É–Ω–∏–∂–∞–ª–∏!\". –¢–∞–∫ –≤–æ—Ç, —É–Ω–∏–∂–∞—Ç—å –Ω–µ –±—É–¥—É. –ù–∞—Å—á–µ—Ç –æ—Å—Ç–∞–ª—å–Ω–æ–≥–æ ‚Äî –Ω–µ —É–≤–µ—Ä–µ–Ω–∞\n\n"
        "–®–µ—Ñ –ö–∏—Ä–∞"
    )
    await message.answer(start_text, reply_markup=builder.as_markup())
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞ –∏ –ø–æ–ª—É—á–∏–ª –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π.")

@dp.message()
async def handle_ingredients(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞. V3.0.
    1. –ò—â–µ—Ç –ø–æ –Ω–∞–º–µ—Ä–µ–Ω–∏—é.
    2. –ò—â–µ—Ç –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.
    3. –ò—â–µ—Ç –ø–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞–º.
    """
    if not message.text or message.text.startswith('/'):
        return

    user_query = message.text.lower().strip()
    logging.info(f"–ü–æ–ª—É—á–µ–Ω —Ä—É—á–Ω–æ–π –∑–∞–ø—Ä–æ—Å –æ—Ç {message.from_user.id}: '{user_query}'")

    # –≠–¢–ê–ü 1: –ü–û–ü–´–¢–ö–ê "–ü–†–û–ß–ò–¢–ê–¢–¨ –ú–´–°–õ–ò" (–ø–æ –Ω–∞–º–µ—Ä–µ–Ω–∏—é)
    intended_recipe = find_recipe_by_intention(user_query)
    if intended_recipe:
        logging.info(f"–ù–∞–π–¥–µ–Ω–æ –Ω–∞–º–µ—Ä–µ–Ω–∏–µ! –†–µ—Ü–µ–ø—Ç: {intended_recipe['id']}")
        response_data = assemble_recipe(intended_recipe)
        await send_recipe_response(message, response_data)
        await send_related_recipes_suggestions(message, intended_recipe)
        return

    # –≠–¢–ê–ü 2: –ü–û–ò–°–ö –ü–û –ù–ê–ó–í–ê–ù–ò–Æ –ö–ê–¢–ï–ì–û–†–ò–ò
    found_category = None
    for category_key, aliases in CATEGORY_ALIASES.items():
        if user_query in aliases:
            found_category = category_key
            break
    
    if found_category:
        logging.info(f"–ó–∞–ø—Ä–æ—Å '{user_query}' —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω –∫–∞–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è '{found_category}'. –í—ã–¥–∞—é —Å–ª—É—á–∞–π–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç.")
        random_recipe = find_random_recipe_by_category(found_category)
        if random_recipe:
            response_data = assemble_recipe(random_recipe)
            await send_recipe_response(message, response_data)
            await send_related_recipes_suggestions(message, random_recipe)
        else:
            await message.answer(f"–í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ¬´{found_category}¬ª –ø–æ–∫–∞ –ø—É—Å—Ç–æ, –Ω–æ —è —ç—Ç–æ –∑–∞–ø–æ–º–Ω—é.")
            menu_builder = get_main_menu_builder()
            await message.answer("–ß–µ–≥–æ –∂–µ–ª–∞–µ—à—å —Ç–µ–ø–µ—Ä—å, —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞—Ç–æ—Ä?", reply_markup=menu_builder.as_markup())
        return

    # –≠–¢–ê–ü 3: –ï–°–õ–ò –ù–ò–ß–ï–ì–û –ù–ï –ü–û–î–û–®–õ–û - –ò–©–ï–ú –ü–û –ò–ù–ì–†–ï–î–ò–ï–ù–¢–ê–ú
    logging.info("–ù–∞–º–µ—Ä–µ–Ω–∏–µ –∏–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ó–∞–ø—É—Å–∫–∞—é –ø–æ–∏—Å–∫ –ø–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞–º...")
    response_data = synthesize_response(user_query)
    await send_recipe_response(message, response_data)

@dp.callback_query(F.data.startswith("term_"))
async def process_term_callback(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ —Å —Ç–µ—Ä–º–∏–Ω–∞–º–∏."""
    term_id = callback_query.data.split("_", 1)[1]
    terms_db = KNOWLEDGE_BASE.get("terms", {})
    term_data = terms_db.get(term_id)
    
    await callback_query.answer()
    if term_data:
        explanation = term_data.get("explanation", "–û–±—ä—è—Å–Ω–µ–Ω–∏–µ –ø–æ—Ç–µ—Ä—è–ª–æ—Å—å...")
        sarcastic_comment = random.choice(term_data.get("sarcastic_comments", ["..."]))
        term_name = term_data.get("aliases", ["–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"])[0].capitalize()
        response_text = (f"<b>üéì –õ–∏–∫–±–µ–∑ –ø–æ —Ç–µ–º–µ ¬´{term_name}¬ª</b>\n\n{explanation}\n\n<i><b>–ú–æ–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> {sarcastic_comment}</i>")
        await callback_query.message.answer(response_text)
    else:
        await callback_query.message.answer("–£–ø—Å... –Ø –∑–∞–±—ã–ª–∞, —á—Ç–æ —ç—Ç–æ –∑–Ω–∞—á–∏—Ç. –ë—ã–≤–∞–µ—Ç.")
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback_query.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –¥–ª—è —Ç–µ—Ä–º–∏–Ω–∞ '{term_id}'.")

@dp.callback_query(F.data.startswith("category_"))
async def process_category_callback(callback_query: types.CallbackQuery):
    """V3.1 - –†–µ–∞–ª–∏–∑—É–µ—Ç '–ú–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤—É—é –ê–≥—Ä–µ—Å—Å–∏—é'."""
    user_id = callback_query.from_user.id
    category = callback_query.data.split("_", 1)[1]
    
    session = get_user_session(user_id)
    
    session["total_clicks"] += 1
    category_clicks = session["category_clicks"].get(category, 0) + 1
    session["category_clicks"][category] = category_clicks
    total_clicks = session["total_clicks"]

    if total_clicks > 50:
        await callback_query.answer("–≠—Ç–æ –Ω–µ –∫–ª–∏–∫–µ—Ä, —É–≥–æ–º–æ–Ω–∏—Å—å!", show_alert=True)
        return
    elif total_clicks > 40:
        await callback_query.answer("–•–≤–∞—Ç–∏—Ç –∫–ª–∏–∫–∞—Ç—å, –ø–æ–∂–∞–ª–µ–π –º—ã—à–∫—É.", show_alert=True)
        return

    REACTION_THRESHOLD = 15
    if category_clicks == REACTION_THRESHOLD:
        reaction_text = CATEGORY_REACTIONS.get(category, "–£ —Ç–µ–±—è –∫–∞–∫–æ–π-—Ç–æ –æ—Å–æ–±—ã–π –∏–Ω—Ç–µ—Ä–µ—Å –∫ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏...")
        await callback_query.answer(reaction_text, show_alert=True)
        session["category_clicks"][category] = 0
        logging.info(f"–î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —Å—Ä–∞–±–æ—Ç–∞–ª–∞ —Ä–µ–∞–∫—Ü–∏—è –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—é '{category}'.")
    else:
        await callback_query.answer()

    recipes_db = KNOWLEDGE_BASE.get("recipes", [])
    candidates = [recipe for recipe in recipes_db if recipe.get("category") == category]
    
    if not candidates:
        await callback_query.message.answer(f"–í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ¬´{category}¬ª –ø–æ–∫–∞ –ø—É—Å—Ç–æ.")
        session["category_clicks"][category] = 0
        return
        
    chosen_recipe = random.choice(candidates)
    
    seen_in_category = session["seen_recipes"].setdefault(category, set())

    if chosen_recipe['id'] in seen_in_category:
        await callback_query.message.answer(
            "–ß—Ç–æ, —É–∂–µ –≤–∏–¥–µ–ª —ç—Ç–æ—Ç —Ä–µ—Ü–µ–ø—Ç? –ü—Ä–∞–≤–∏–ª—å–Ω–æ, –Ω–µ—á–µ–≥–æ –Ω–∞ –æ–¥–Ω–∏ –∏ —Ç–µ –∂–µ –∫–Ω–æ–ø–∫–∏ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –¥–∞–≤–∏—Ç—å. "
            "–ù–∞–ø–∏—à–∏ –º–Ω–µ, —á—Ç–æ —É —Ç–µ–±—è –µ—Å—Ç—å –≤ —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–µ, –∏ —è –ø—Ä–µ–¥–ª–æ–∂—É —á—Ç–æ-—Ç–æ –±–æ–ª–µ–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ, –æ—Å–Ω–æ–≤–∞–Ω–Ω–æ–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –∞ –Ω–µ –Ω–∞ —Å–ª–µ–ø–æ–º –ø–µ—Ä–µ–±–æ—Ä–µ."
        )
        seen_in_category.clear()
        session["category_clicks"][category] = 0
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–ª—É—á–∏–ª –ø–æ–≤—Ç–æ—Ä –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}'. –ü–∞–º—è—Ç—å –∏ —Å—á–µ—Ç—á–∏–∫ —Å–±—Ä–æ—à–µ–Ω—ã.")
        return
        
    seen_in_category.add(chosen_recipe['id'])

    if len(seen_in_category) == len(candidates):
        await callback_query.message.answer(f"–ö—Å—Ç–∞—Ç–∏, —Ç—ã —Ç–æ–ª—å–∫–æ —á—Ç–æ –ø–æ—Å–º–æ—Ç—Ä–µ–ª –≤—Å–µ —Ä–µ—Ü–µ–ø—Ç—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ¬´{category}¬ª. –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π –∫—Ä—É–≥.")
        seen_in_category.clear()
        session["category_clicks"][category] = 0

    response_data = assemble_recipe(chosen_recipe)
    await send_recipe_response(callback_query.message, response_data)
    await send_related_recipes_suggestions(callback_query.message, chosen_recipe)
        
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –±—ã–ª –≤—ã–¥–∞–Ω —Ä–µ—Ü–µ–ø—Ç '{chosen_recipe['id']}' –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}'. –ö–ª–∏–∫–æ–≤ –ø–æ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {category_clicks}. –í—Å–µ–≥–æ –∫–ª–∏–∫–æ–≤: {total_clicks}.")


@dp.callback_query(F.data.startswith("show_recipe_"))
async def process_show_recipe_callback(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –≤—ã–±–æ—Ä–∞ —Ä–µ—Ü–µ–ø—Ç–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤. V2.0 - –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –ª–æ–≥–∏–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ ID."""
    
    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—ã–π –º–µ—Ç–æ–¥ .removeprefix()
    recipe_id = callback_query.data.removeprefix("show_recipe_")
    
    await callback_query.answer()
    
    chosen_recipe = find_recipe_by_id(recipe_id)

    if chosen_recipe:
        response_data = assemble_recipe(chosen_recipe)
        await send_recipe_response(callback_query.message, response_data)
        await send_related_recipes_suggestions(callback_query.message, chosen_recipe)
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback_query.from_user.id} –≤—ã–±—Ä–∞–ª —Ä–µ—Ü–µ–ø—Ç '{recipe_id}' –∏–∑ —Å–ø–∏—Å–∫–∞ –æ–ø—Ü–∏–π.")
    else:
        # –≠—Ç–∞ –≤–µ—Ç–∫–∞ —Ç–µ–ø–µ—Ä—å –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ —Å–ª—É—á–∞–µ —Ä–µ–∞–ª—å–Ω–æ–π —Ä–∞—Å—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö
        logging.error(f"–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ –Ω–∞–π–¥–µ–Ω —Ä–µ—Ü–µ–ø—Ç —Å ID '{recipe_id}', —Ö–æ—Ç—è –Ω–∞ –Ω–µ–≥–æ –±—ã–ª–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ —Å—Å—ã–ª–∫–∞!")
        await callback_query.message.answer("–ò–∑–≤–∏–Ω–∏, —ç—Ç–æ—Ç —Ä–µ—Ü–µ–ø—Ç –∫—É–¥–∞-—Ç–æ –ø—Ä–æ–ø–∞–ª –∏–∑ –º–æ–µ–π –ø–∞–º—è—Ç–∏. –ü–æ–ø—Ä–æ–±—É–π –≤—ã–±—Ä–∞—Ç—å —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ.")
        menu_builder = get_main_menu_builder()
        await callback_query.message.answer("–ß–µ–≥–æ –∂–µ–ª–∞–µ—à—å —Ç–µ–ø–µ—Ä—å, —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞—Ç–æ—Ä?", reply_markup=menu_builder.as_markup())


# --- –ó–ê–ü–£–°–ö –ë–û–¢–ê ---

async def main():
    try:
        load_knowledge_base()
    except Exception as e:
        logging.critical(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞: {e}", exc_info=True)
        return
    await bot.delete_webhook(drop_pending_updates=True)
    logging.info("–®–µ—Ñ-—Å–∞–¥–∏—Å—Ç (–Ω–∞ –∞—Ç–æ–º–Ω–æ–º —è–¥—Ä–µ) –≤—Ö–æ–¥–∏—Ç –≤ —á–∞—Ç...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    logging.info("–ó–∞–ø—É—Å–∫ –ª–æ–∫–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏...")
    asyncio.run(main())