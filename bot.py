import os
import asyncio
import logging
import random

# –ò–º–ø–æ—Ä—Ç—ã aiogram
from aiogram import Bot, Dispatcher, types, F
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import Command
from aiogram.types import InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –í–°–ï –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ recipe_synthesizer
from utils.recipe_synthesizer import (
    KNOWLEDGE_BASE,
    load_knowledge_base,
    synthesize_response,
    find_random_recipe_by_category,
    # --- –ù–û–í–´–ï –ò–ú–ü–û–†–¢–´ ---
    get_all_cuisines,
    find_random_recipe_by_cuisine,
    # -----------------------
    assemble_recipe,
    find_recipe_by_intention,
    find_recipe_by_id
)

# --- –ë–õ–û–ö –ù–ê–°–¢–†–û–ô–ö–ò ---

os.makedirs("logs", exist_ok=True)
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(name)s - %(message)s',
    handlers=[
        logging.FileHandler("logs/chef_sadist.log", encoding='utf-8'),
        logging.StreamHandler()
    ]
)

from dotenv import load_dotenv
load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN_V2")

if not TELEGRAM_TOKEN:
    raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω —Ç–æ–∫–µ–Ω TELEGRAM_TOKEN_V2 –≤ .env —Ñ–∞–π–ª–µ!")

bot = Bot(token=TELEGRAM_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher()

# –•–†–ê–ù–ò–õ–ò–©–ï –°–ï–°–°–ò–ô
USER_SESSIONS = {}

# –°–õ–û–í–ê–†–¨ –î–õ–Ø –†–ê–°–ü–û–ó–ù–ê–í–ê–ù–ò–Ø –ö–ê–¢–ï–ì–û–†–ò–ô –í –¢–ï–ö–°–¢–ï
CATEGORY_ALIASES = {
    "hot_dishes": ["–≥–æ—Ä—è—á–µ–µ", "–æ—Å–Ω–æ–≤–Ω–æ–µ –±–ª—é–¥–æ"],
    "soups": ["—Å—É–ø", "—Å—É–ø—ã", "–ø–æ—Ö–ª–µ–±–∫–∞"],
    "pasta": ["–ø–∞—Å—Ç–∞", "–º–∞–∫–∞—Ä–æ–Ω—ã"],
    "salads": ["—Å–∞–ª–∞—Ç", "—Å–∞–ª–∞—Ç—ã"],
    "garnishes": ["–≥–∞—Ä–Ω–∏—Ä", "–≥–∞—Ä–Ω–∏—Ä—ã"],
    "breakfasts": ["–∑–∞–≤—Ç—Ä–∞–∫", "–∑–∞–≤—Ç—Ä–∞–∫–∏"],
    "sandwiches": ["–±—É—Ç–µ—Ä–±—Ä–æ–¥", "–±—É—Ç–µ—Ä–±—Ä–æ–¥—ã", "—Å—ç–Ω–¥–≤–∏—á"],
    "fried_gold": ["–∂–∞—Ä–µ–Ω–æ–µ", "—Ñ—Ä–∏—Ç—é—Ä"],
    "baked_goods": ["–≤—ã–ø–µ—á–∫–∞", "–ø–∏—Ä–æ–≥", "–ø–∏—Ä–æ–≥–∏"],
    "desserts": ["–¥–µ—Å–µ—Ä—Ç", "–¥–µ—Å–µ—Ä—Ç—ã", "—Å–ª–∞–¥–∫–æ–µ"],
    "sauces": ["—Å–æ—É—Å", "—Å–æ—É—Å—ã"],
    "drinks": ["–Ω–∞–ø–∏—Ç–æ–∫", "–Ω–∞–ø–∏—Ç–∫–∏", "–ø–∏—Ç—å"],
    "meats_curing": ["–≤—è–ª–µ–Ω–∏–µ", "–ø–æ—Å–æ–ª", "–≤—è–ª–µ–Ω–æ–µ –º—è—Å–æ", "—Å–æ–ª–µ–Ω–∞—è —Ä—ã–±–∞"],
    "veg_preserves": ["–∫–æ–Ω—Å–µ—Ä–≤–∞—Ü–∏—è", "—Å–æ–ª–µ–Ω—å—è", "–º–∞—Ä–∏–Ω–æ–≤–∞–Ω–∏–µ", "–∑–∞–≥–æ—Ç–æ–≤–∫–∏"]
}

# --- –ù–û–í–´–ô –°–õ–û–í–ê–†–¨ –î–õ–Ø –ù–ê–ó–í–ê–ù–ò–ô –ö–£–•–û–ù–¨ ---
CUISINE_NAMES = {
    "american": "üá∫üá∏ –ê–º–µ—Ä–∏–∫–∞–Ω—Å–∫–∞—è",
    "american_fusion": "üá∫üá∏ –§—å—é–∂–Ω (–°–®–ê)",
    "american_italian": "üá∫üá∏üáÆüáπ –ò—Ç–∞–ª–æ-–∞–º–µ—Ä–∏–∫–∞–Ω—Å–∫–∞—è",
    "asian_fusion": "üåè –ê–∑–∏–∞—Ç—Å–∫–∏–π —Ñ—å—é–∂–Ω",
    "balkan": "üá∑üá∏ –ë–∞–ª–∫–∞–Ω—Å–∫–∞—è",
    "brazilian": "üáßüá∑ –ë—Ä–∞–∑–∏–ª—å—Å–∫–∞—è",
    "central_asian": "üá∫üáø –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–∞–∑–∏–∞—Ç—Å–∫–∞—è",
    "chinese": "üá®üá≥ –ö–∏—Ç–∞–π—Å–∫–∞—è",
    "czech": "üá®üáø –ß–µ—à—Å–∫–∞—è",
    "danish": "üá©üá∞ –î–∞—Ç—Å–∫–∞—è",
    "eastern_european": "üá™üá∫ –í–æ—Å—Ç–æ—á–Ω–æ–µ–≤—Ä–æ–ø–µ–π—Å–∫–∞—è",
    "egyptian": "üá™üá¨ –ï–≥–∏–ø–µ—Ç—Å–∫–∞—è",
    "european_classic": "üá™üá∫ –ï–≤—Ä–æ–ø–µ–π—Å–∫–∞—è –∫–ª–∞—Å—Å–∏–∫–∞",
    "finnish": "üá´üáÆ –§–∏–Ω—Å–∫–∞—è",
    "french": "üá´üá∑ –§—Ä–∞–Ω—Ü—É–∑—Å–∫–∞—è",
    "fusion": "üåÄ –§—å—é–∂–Ω",
    "georgian": "üá¨üá™ –ì—Ä—É–∑–∏–Ω—Å–∫–∞—è",
    "german": "üá©üá™ –ù–µ–º–µ—Ü–∫–∞—è",
    "greek": "üá¨üá∑ –ì—Ä–µ—á–µ—Å–∫–∞—è",
    "hungarian": "üá≠üá∫ –í–µ–Ω–≥–µ—Ä—Å–∫–∞—è",
    "icelandic": "üáÆüá∏ –ò—Å–ª–∞–Ω–¥—Å–∫–∞—è",
    "international": "üåç –ò–Ω—Ç–µ—Ä–Ω–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è",
    "irish": "üáÆüá™ –ò—Ä–ª–∞–Ω–¥—Å–∫–∞—è",
    "italian": "üáÆüáπ –ò—Ç–∞–ª—å—è–Ω—Å–∫–∞—è",
    "italian_fusion": "üáÆüáπ –§—å—é–∂–Ω (–ò—Ç–∞–ª–∏—è)",
    "japanese": "üáØüáµ –Ø–ø–æ–Ω—Å–∫–∞—è",
    "jewish_soviet": "üïé –ï–≤—Ä–µ–π—Å–∫–∞—è (—Å–æ–≤–µ—Ç—Å–∫–∞—è)",
    "mediterranean": "üåä –°—Ä–µ–¥–∏–∑–µ–º–Ω–æ–º–æ—Ä—Å–∫–∞—è",
    "middle_eastern": "üïå –ë–ª–∏–∂–Ω–µ–≤–æ—Å—Ç–æ—á–Ω–∞—è",
    "norwegian": "üá≥üá¥ –ù–æ—Ä–≤–µ–∂—Å–∫–∞—è",
    "portuguese": "üáµüáπ –ü–æ—Ä—Ç—É–≥–∞–ª—å—Å–∫–∞—è",
    "russian": "üá∑üá∫ –†—É—Å—Å–∫–∞—è",
    "russian_ukrainian": "üá∑üá∫üá∫üá¶ –†—É—Å—Å–∫–∞—è/–£–∫—Ä–∞–∏–Ω—Å–∫–∞—è",
    "scandinavian": "‚ùÑÔ∏è –°–∫–∞–Ω–¥–∏–Ω–∞–≤—Å–∫–∞—è",
    "slovenian": "üá∏üáÆ –°–ª–æ–≤–µ–Ω—Å–∫–∞—è",
    "soviet_union": "‚ò≠ –°–°–°–† / –ü–æ—Å—Ç—Å–æ–≤–µ—Ç—Å–∫–∞—è",
    "spanish": "üá™üá∏ –ò—Å–ø–∞–Ω—Å–∫–∞—è",
    "swedish": "üá∏üá™ –®–≤–µ–¥—Å–∫–∞—è",
    "tatar": " Tatar",
    "thai": "üáπüá≠ –¢–∞–π—Å–∫–∞—è",
    "ukrainian": "üá∫üá¶ –£–∫—Ä–∞–∏–Ω—Å–∫–∞—è",
    "wild_west": "ü§† –î–∏–∫–∏–π –ó–∞–ø–∞–¥"
}

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã—Ö —Ä–µ–∞–∫—Ü–∏–π –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
CATEGORY_REACTIONS = {
    # ... (–æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
}


# --- –°–õ–£–ñ–ï–ë–ù–´–ï –§–£–ù–ö–¶–ò–ò ---

def get_user_session(user_id: int) -> dict:
    """–ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –ø–æ–ª—É—á–∞–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç —Å–µ—Å—Å–∏—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    session = USER_SESSIONS.setdefault(user_id, {})
    session.setdefault("category_clicks", {})
    session.setdefault("seen_recipes", {})
    # --- –ù–û–í–´–ï –ü–û–õ–Ø –î–õ–Ø –°–ï–°–°–ò–ò ---
    session.setdefault("cuisine_clicks", {})
    session.setdefault("seen_recipes_cuisine", {})
    # -------------------------------
    session.setdefault("total_clicks", 0)
    return session

def get_main_menu_builder() -> InlineKeyboardBuilder:
    """–°–æ–±–∏—Ä–∞–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –±–∏–ª–¥–µ—Ä –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é."""
    builder = InlineKeyboardBuilder()
    categories = [
        ("üî• –ì–æ—Ä—è—á–µ–µ", "hot_dishes"),
        ("ü•£ –°—É–ø—ã", "soups"),
        ("üçù –ü–∞—Å—Ç–∞", "pasta"),
        ("ü•ó –°–∞–ª–∞—Ç—ã", "salads"),
        ("ü•î –ì–∞—Ä–Ω–∏—Ä—ã", "garnishes"),
        ("üç≥ –ó–∞–≤—Ç—Ä–∞–∫–∏", "breakfasts"),
        ("ü•™ –ë—É—Ç–µ—Ä–±—Ä–æ–¥—ã", "sandwiches"),
        ("‚ú® –ñ–∞—Ä–µ–Ω–æ–µ –ó–æ–ª–æ—Ç–æ", "fried_gold"),
        ("ü•ß –í—ã–ø–µ—á–∫–∞", "baked_goods"),
        ("üç∞ –î–µ—Å–µ—Ä—Ç—ã", "desserts"),
        ("üå∂Ô∏è –°–æ—É—Å—ã", "sauces"),
        ("üç∏ –ù–∞–ø–∏—Ç–∫–∏", "drinks"),
        ("ü•© –í—è–ª–µ–Ω–∏–µ/–ü–æ—Å–æ–ª", "meats_curing"),
        ("ü•í –ö–æ–Ω—Å–µ—Ä–≤–∞—Ü–∏—è", "veg_preserves")
    ]
    for text, category_key in categories:
        builder.add(InlineKeyboardButton(text=text, callback_data=f"category_{category_key}"))

    builder.adjust(2)
    # --- –ù–û–í–ê–Ø –ö–ù–û–ü–ö–ê ---
    builder.row(InlineKeyboardButton(text="üåç –ö—É—Ö–Ω–∏ –ú–∏—Ä–∞", callback_data="show_cuisines"))
    # ----------------------
    return builder

# ... (—Ñ—É–Ω–∫—Ü–∏–∏ send_recipe_response –∏ send_related_recipes_suggestions –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...


# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ---

@dp.message(Command("start", "help"))
# ... (–æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...

@dp.message()
# ... (–æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...

@dp.callback_query(F.data.startswith("term_"))
# ... (–æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...

# --- –ù–û–í–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –î–õ–Ø –ü–û–ö–ê–ó–ê –ö–£–•–û–ù–¨ ---
@dp.callback_query(F.data == "show_cuisines")
async def show_cuisines_callback(callback_query: types.CallbackQuery):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫—É—Ö–æ–Ω—å –º–∏—Ä–∞."""
    await callback_query.answer()
    
    cuisines = get_all_cuisines()
    if not cuisines:
        await callback_query.message.edit_text("–ü–æ–∫–∞ —á—Ç–æ —è –Ω–µ –∫–∞—Ç–∞–ª–æ–≥–∏–∑–∏—Ä–æ–≤–∞–ª–∞ –Ω–∏ –æ–¥–Ω–æ–π –∫—É—Ö–Ω–∏ –º–∏—Ä–∞. –°—Ç—Ä–∞–Ω–Ω–æ.")
        return

    builder = InlineKeyboardBuilder()
    for cuisine_key in cuisines:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—à —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –∫—Ä–∞—Å–∏–≤—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π
        cuisine_name = CUISINE_NAMES.get(cuisine_key, cuisine_key.capitalize())
        builder.add(InlineKeyboardButton(text=cuisine_name, callback_data=f"cuisine_{cuisine_key}"))
    
    builder.adjust(2)
    
    await callback_query.message.edit_text(
        "–í—ã–±–µ—Ä–∏ –∫—É–ª–∏–Ω–∞—Ä–Ω—É—é –¥–æ–∫—Ç—Ä–∏–Ω—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—á–µ—à—å –∏–∑—É—á–∏—Ç—å. –ù–æ –ø–æ–º–Ω–∏: –ø—É—Ç—å –∫ –∑–Ω–∞–Ω–∏—é –ª–µ–∂–∏—Ç —á–µ—Ä–µ–∑ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É.",
        reply_markup=builder.as_markup()
    )
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {callback_query.from_user.id} –ø–æ–∫–∞–∑–∞–Ω —Å–ø–∏—Å–æ–∫ –∫—É—Ö–æ–Ω—å.")

# --- –ù–û–í–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –î–õ–Ø –í–´–ë–û–†–ê –ö–û–ù–ö–†–ï–¢–ù–û–ô –ö–£–•–ù–ò ---
@dp.callback_query(F.data.startswith("cuisine_"))
async def process_cuisine_callback(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∫—É—Ö–Ω–∏ –∏ –≤—ã–¥–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç –∏–∑ –Ω–µ–µ."""
    user_id = callback_query.from_user.id
    cuisine = callback_query.data.split("_", 1)[1]
    
    await callback_query.answer()
    
    session = get_user_session(user_id)
    
    # –õ–æ–≥–∏–∫–∞ –ø—Ä–æ—Ç–∏–≤ –∑–∞–∫–ª–∏–∫–∏–≤–∞–Ω–∏—è (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º)
    session["total_clicks"] += 1
    cuisine_clicks = session["cuisine_clicks"].get(cuisine, 0) + 1
    session["cuisine_clicks"][cuisine] = cuisine_clicks
    
    chosen_recipe = find_random_recipe_by_cuisine(cuisine)
    
    if not chosen_recipe:
        await callback_query.message.answer(f"–í –¥–æ–∫—Ç—Ä–∏–Ω–µ ¬´{CUISINE_NAMES.get(cuisine, cuisine)}¬ª –ø–æ–∫–∞ –ø—É—Å—Ç–æ. –Ø —ç—Ç–æ –∑–∞–ø–æ–º–Ω—é.")
        session["cuisine_clicks"][cuisine] = 0
        return

    # –õ–æ–≥–∏–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤ (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º)
    seen_in_cuisine = session["seen_recipes_cuisine"].setdefault(cuisine, set())
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–º –Ω–µ–ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–º —Ä–µ—Ü–µ–ø—Ç–æ–º
    recipes_in_cuisine = [r for r in KNOWLEDGE_BASE.get("recipes", []) if r.get("cuisine") == cuisine]

    if chosen_recipe['id'] in seen_in_cuisine and len(seen_in_cuisine) < len(recipes_in_cuisine):
        # –ï—Å–ª–∏ —Ä–µ—Ü–µ–ø—Ç —É–∂–µ –≤–∏–¥–µ–ª–∏, –Ω–æ –µ—Å—Ç—å –∏ –¥—Ä—É–≥–∏–µ, –∏—â–µ–º –Ω–æ–≤—ã–π
        available_recipes = [r for r in recipes_in_cuisine if r['id'] not in seen_in_cuisine]
        if available_recipes:
            chosen_recipe = random.choice(available_recipes)
        # –ï—Å–ª–∏ –≤–¥—Ä—É–≥ –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —É–∂–µ –≤–∏–¥–µ–ª–∏ (–º–∞–ª–æ–≤–µ—Ä–æ—è—Ç–Ω–æ, –Ω–æ –≤–æ–∑–º–æ–∂–Ω–æ), —Å–±—Ä–∞—Å—ã–≤–∞–µ–º
        else:
            seen_in_cuisine.clear()

    seen_in_cuisine.add(chosen_recipe['id'])

    if len(seen_in_cuisine) == len(recipes_in_cuisine):
        await callback_query.message.answer(f"–ö—Å—Ç–∞—Ç–∏, —Ç—ã —Ç–æ–ª—å–∫–æ —á—Ç–æ –∏–∑—É—á–∏–ª –≤—Å–µ –ø—Ä–æ—Ç–æ–∫–æ–ª—ã –¥–æ–∫—Ç—Ä–∏–Ω—ã ¬´{CUISINE_NAMES.get(cuisine, cuisine)}¬ª. –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π —Ü–∏–∫–ª –ø–æ–∑–Ω–∞–Ω–∏—è.")
        seen_in_cuisine.clear()
        session["cuisine_clicks"][cuisine] = 0

    response_data = assemble_recipe(chosen_recipe)
    await send_recipe_response(callback_query.message, response_data)
    await send_related_recipes_suggestions(callback_query.message, chosen_recipe)
        
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –±—ã–ª –≤—ã–¥–∞–Ω —Ä–µ—Ü–µ–ø—Ç '{chosen_recipe['id']}' –ø–æ –∫—É—Ö–Ω–µ '{cuisine}'.")

@dp.callback_query(F.data.startswith("category_"))
async def process_category_callback(callback_query: types.CallbackQuery):
    """V3.1 - –†–µ–∞–ª–∏–∑—É–µ—Ç '–ú–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤—É—é –ê–≥—Ä–µ—Å—Å–∏—é'."""
    user_id = callback_query.from_user.id
    category = callback_query.data.split("_", 1)[1]
    
    session = get_user_session(user_id)
    
    session["total_clicks"] += 1
    category_clicks = session["category_clicks"].get(category, 0) + 1
    session["category_clicks"][category] = category_clicks
    total_clicks = session["total_clicks"]

    if total_clicks > 50:
        await callback_query.answer("–≠—Ç–æ –Ω–µ –∫–ª–∏–∫–µ—Ä, —É–≥–æ–º–æ–Ω–∏—Å—å!", show_alert=True)
        return
    elif total_clicks > 40:
        await callback_query.answer("–•–≤–∞—Ç–∏—Ç –∫–ª–∏–∫–∞—Ç—å, –ø–æ–∂–∞–ª–µ–π –º—ã—à–∫—É.", show_alert=True)
        return

    REACTION_THRESHOLD = 15
    if category_clicks == REACTION_THRESHOLD:
        reaction_text = CATEGORY_REACTIONS.get(category, "–£ —Ç–µ–±—è –∫–∞–∫–æ–π-—Ç–æ –æ—Å–æ–±—ã–π –∏–Ω—Ç–µ—Ä–µ—Å –∫ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏...")
        await callback_query.answer(reaction_text, show_alert=True)
        session["category_clicks"][category] = 0
        logging.info(f"–î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —Å—Ä–∞–±–æ—Ç–∞–ª–∞ —Ä–µ–∞–∫—Ü–∏—è –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—é '{category}'.")
    else:
        await callback_query.answer()

    recipes_db = KNOWLEDGE_BASE.get("recipes", [])
    candidates = [recipe for recipe in recipes_db if recipe.get("category") == category]
    
    if not candidates:
        await callback_query.message.answer(f"–í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ¬´{category}¬ª –ø–æ–∫–∞ –ø—É—Å—Ç–æ.")
        session["category_clicks"][category] = 0
        return
        
    chosen_recipe = random.choice(candidates)
    
    seen_in_category = session["seen_recipes"].setdefault(category, set())

    if chosen_recipe['id'] in seen_in_category:
        await callback_query.message.answer(
            "–ß—Ç–æ, —É–∂–µ –≤–∏–¥–µ–ª —ç—Ç–æ—Ç —Ä–µ—Ü–µ–ø—Ç? –ü—Ä–∞–≤–∏–ª—å–Ω–æ, –Ω–µ—á–µ–≥–æ –Ω–∞ –æ–¥–Ω–∏ –∏ —Ç–µ –∂–µ –∫–Ω–æ–ø–∫–∏ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –¥–∞–≤–∏—Ç—å. "
            "–ù–∞–ø–∏—à–∏ –º–Ω–µ, —á—Ç–æ —É —Ç–µ–±—è –µ—Å—Ç—å –≤ —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–µ, –∏ —è –ø—Ä–µ–¥–ª–æ–∂—É —á—Ç–æ-—Ç–æ –±–æ–ª–µ–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ, –æ—Å–Ω–æ–≤–∞–Ω–Ω–æ–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –∞ –Ω–µ –Ω–∞ —Å–ª–µ–ø–æ–º –ø–µ—Ä–µ–±–æ—Ä–µ."
        )
        seen_in_category.clear()
        session["category_clicks"][category] = 0
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–ª—É—á–∏–ª –ø–æ–≤—Ç–æ—Ä –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}'. –ü–∞–º—è—Ç—å –∏ —Å—á–µ—Ç—á–∏–∫ —Å–±—Ä–æ—à–µ–Ω—ã.")
        return
        
    seen_in_category.add(chosen_recipe['id'])

    if len(seen_in_category) == len(candidates):
        await callback_query.message.answer(f"–ö—Å—Ç–∞—Ç–∏, —Ç—ã —Ç–æ–ª—å–∫–æ —á—Ç–æ –ø–æ—Å–º–æ—Ç—Ä–µ–ª –≤—Å–µ —Ä–µ—Ü–µ–ø—Ç—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ¬´{category}¬ª. –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π –∫—Ä—É–≥.")
        seen_in_category.clear()
        session["category_clicks"][category] = 0

    response_data = assemble_recipe(chosen_recipe)
    await send_recipe_response(callback_query.message, response_data)
    await send_related_recipes_suggestions(callback_query.message, chosen_recipe)
        
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –±—ã–ª –≤—ã–¥–∞–Ω —Ä–µ—Ü–µ–ø—Ç '{chosen_recipe['id']}' –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}'. –ö–ª–∏–∫–æ–≤ –ø–æ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {category_clicks}. –í—Å–µ–≥–æ –∫–ª–∏–∫–æ–≤: {total_clicks}.")


@dp.callback_query(F.data.startswith("show_recipe_"))
async def process_show_recipe_callback(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –≤—ã–±–æ—Ä–∞ —Ä–µ—Ü–µ–ø—Ç–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤. V2.0 - –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –ª–æ–≥–∏–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ ID."""
    
    recipe_id = callback_query.data.removeprefix("show_recipe_")
    
    await callback_query.answer()
    
    chosen_recipe = find_recipe_by_id(recipe_id)

    if chosen_recipe:
        response_data = assemble_recipe(chosen_recipe)
        await send_recipe_response(callback_query.message, response_data)
        await send_related_recipes_suggestions(callback_query.message, chosen_recipe)
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback_query.from_user.id} –≤—ã–±—Ä–∞–ª —Ä–µ—Ü–µ–ø—Ç '{recipe_id}' –∏–∑ —Å–ø–∏—Å–∫–∞ –æ–ø—Ü–∏–π.")
    else:
        logging.error(f"–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ –Ω–∞–π–¥–µ–Ω —Ä–µ—Ü–µ–ø—Ç —Å ID '{recipe_id}', —Ö–æ—Ç—è –Ω–∞ –Ω–µ–≥–æ –±—ã–ª–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ —Å—Å—ã–ª–∫–∞!")
        await callback_query.message.answer("–ò–∑–≤–∏–Ω–∏, —ç—Ç–æ—Ç —Ä–µ—Ü–µ–ø—Ç –∫—É–¥–∞-—Ç–æ –ø—Ä–æ–ø–∞–ª –∏–∑ –º–æ–µ–π –ø–∞–º—è—Ç–∏. –ü–æ–ø—Ä–æ–±—É–π –≤—ã–±—Ä–∞—Ç—å —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ.")
        menu_builder = get_main_menu_builder()
        await callback_query.message.answer("–ß–µ–≥–æ –∂–µ–ª–∞–µ—à—å —Ç–µ–ø–µ—Ä—å, —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞—Ç–æ—Ä?", reply_markup=menu_builder.as_markup())


# --- –ó–ê–ü–£–°–ö –ë–û–¢–ê ---

async def main():
    try:
        load_knowledge_base()
    except Exception as e:
        logging.critical(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞: {e}", exc_info=True)
        return
    await bot.delete_webhook(drop_pending_updates=True)
    logging.info("–®–µ—Ñ-—Å–∞–¥–∏—Å—Ç (–Ω–∞ –∞—Ç–æ–º–Ω–æ–º —è–¥—Ä–µ) –≤—Ö–æ–¥–∏—Ç –≤ —á–∞—Ç...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    logging.info("–ó–∞–ø—É—Å–∫ –ª–æ–∫–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏...")
    asyncio.run(main())